#!/bin/bash
# sipxtunnel - Startup script for stunnel for internal encryption
# chkconfig: 35 85 15
# description: sipxtunnel is encrypted communications service
# processname: tunnel

. /etc/rc.d/init.d/functions || exit $ENOENT
. @SIPX_LIBEXECDIR@/sipx-utils.sh || exit $ENOENT

# Copyright (c) 2012 eZuce, Inc. All rights reserved.
# Contributed to SIPfoundry under a Contributor Agreement
#
# This software is free software; you can redistribute it and/or modify it under
# the terms of the Affero General Public License (AGPL) as published by the
# Free Software Foundation; either version 3 of the License, or (at your option)
# any later version.
#
# This software is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more
# details.

usage() {
cat <<USAGE
Usage: $0 {start|stop|status|restart|reload|force-reload|condrestart}"

Start a tunnel in @MODE@ mode for encryption with other servers.

USAGE
}

Status=0
PidFile=@SIPX_RUNDIR@/tunnel-@MODE@.pid
[ @MODE@ = "server" ] && regex=".*/stunnel\\s.*/tunnel-server.ini"
[ @MODE@ = "client" ] && regex=".*/stunnel\\s.*/tunnel-client.ini"

start() {
  checkRunningInstance  "root" $regex > /dev/null
  [ $? -eq 0 ] && { echo -n "@MODE@ $runningError"; echo_failure; echo; exit $ERUNNING; }
  echo -n "Starting tunnel service in @MODE@ mode..."
  /usr/bin/stunnel @SIPX_CONFDIR@/tunnel-@MODE@.ini

  if [ $# -gt 0 ]; then
    #check if process was spawned
    checkRunningInstanceTimeout "root" $regex
    Status=$?
    [ $Status -eq 0 ] || { echo_failure; echo; exit $ESRCH; }
    pid=`ps -u "root" -o pid,args | grep $regex | grep -v "grep" | tail -1 | awk '{print $1 }'`
    checkIfListening $pid
    Status=$?
    [ $Status -eq 0 ] || { echo_failure; echo; exit $ENOSCKT; }
    [ $Status -eq 0 ] && { echo_success; echo; }
  fi
}

stop() {
  sipx_stop tunnel ${PidFile}
  killAnyOrphans root $regex
}

restart() {
  stop
  start $withCheck
}

asyncrestart() {
  stop
  start
}

case "$1" in
  nofork)
    NoFork=1
    start
    ;;
  start)
    start $withCheck
    ;;
  stop)
    stop
    ;;
  restart|reload|force-reload)
    restart
    ;;
  asyncrestart)
    asyncrestart
    ;;
  condrestart)
    checkRunningInstance  root $regex > /dev/null
    Status=$?
    [ $Status -eq 0 ] && restart || :
    ;;
  status)
    checkRunningInstance root $regex tunnel-@MODE@
    Status=$?
    ;;
  configtest)
    configtest
    ;;
  *)
    usage
    Status=$EINCORRECTUSAGE
esac

exit $Status

