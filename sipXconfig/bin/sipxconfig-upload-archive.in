#!/bin/env ruby

# Copyright (c) 2012 eZuce, Inc. All rights reserved.
# Contributed to SIPfoundry under a Contributor Agreement
#
# This software is free software; you can redistribute it and/or modify it under
# the terms of the Affero General Public License (AGPL) as published by the
# Free Software Foundation; either version 3 of the License, or (at your option)
# any later version.
#
# This software is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more
# details.

#
# Archive and Restore sipXconfig's postgres database. Can be used as standalone
# script or within the larger sipx-backup context.
#

require 'fileutils'

class ArchiveBase
  attr_writer :verbose

  def initialize
    @initd = "@SIPX_SERVICEDIR@"
    @sipxdata = "@SIPX_VARDIR@"
    @ver = "@PACKAGE_VERSION@"
  end

  def cmd(cmd)
    puts cmd if @verbose
    rc = system(cmd)
    return rc
  end
end

class Archive < ArchiveBase
  def run(params)
    File.open('version','w') { |f|
      f.puts @ver
    }
    cmd "tar -cz -f #{params[:file]} version -C #{@sipxdata} upload" or
      raise "Unabled to create archive #{params[:file]}"
    FileUtils.rm('version')
  end
end

class Restore < ArchiveBase
  def initialize
    super
  end

  def run(params)
    cmd "tar -tzf #{params[:file]} version" or
      raise "Verification failed. Could not determine format of #{params[:file]}"    

    cmd "tar -xz --exclude=version -C #{@sipxdata}/../.. -f #{params[:file]}" or
      raise "Failed to extract database from archive."
  end
end

if __FILE__ == $0

require 'optparse'
params = {}
operation = nil
params[:restart] = true
verbose = false
args = OptionParser.new { |opts|
  opts.banner = <<EOF
Create or restore configuration to/from an archive file.
EOF

  opts.on("--archive <archive>",
      "Backup to the specified file.") { |v|
    operation = Archive.new
    params[:file] = v
  }

  opts.on("--restore <archive>",
      "Restore from the specified file.") { |v|
    operation = Restore.new
    params[:file] = v
  }

  opts.on("--verbose", "Show each command that is run.") {
    verbose = true
  }
}
args.parse!

if operation.nil?
  raise "Must specify either restore or archive options."
end

operation.verbose = verbose
operation.run(params)
exit 0

end
