#!/bin/env python

# Copyright (c) 2013 eZuce, Inc. All rights reserved. 
# Contributed to SIPfoundry under a Contributor Agreement 
# 
# This software is free software; you can redistribute it and/or modify it under 
# the terms of the Affero General Public License (AGPL) as published by the 
# Free Software Foundation; either version 3 of the License, or (at your option) 
# any later version. 
# 
# This software is distributed in the hope that it will be useful, but WITHOUT 
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS 
# FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more 
# details.

# Analyze the status of a set of mongo clusters and decide what operations
# are need to bring a cluster to a healthy state.  This script is mostly 
# logic based and has no need to connect to mongo servers or operate with
# any operating system.

# Meant to be used as the second part of the set of three mongodb
# detailed below and in each script:
#
# Part 1.) mongodb-status assesses the health of a system
# Part 2.) mongodb-analyzer takes the results from mongodb-status 
#  and comes with with a set of recommended tasks to bring the
#  cluster back into a health state if it decided it's not in a
#  healthy state. Tasks are broken up into a list of zero or more
#  tasks for each server.
# Part 3.) mongodb-admin then takes a set of tasks interpretted by
#   an admin at the command prompt or fed into a user interface 
#   for the admin to select which tasks they's like to perform on
#    which server.  The tasks are then passed to the mongodb-admin
#    script on the appropriate server to execute.


# Deprecation note: intentionally using deprecated Connection class because 
# class MongoClient is not available yet in pymongo on centos 6
import sys
import traceback
import logging
import argparse
import json

action_models = []

class ActionMeta:
    def __init__(self, model, cluster_states, server_states):
        self.cluster_states = cluster_states
        self.server_states = server_states
        self.model = model
        self.required_actions = {}
        self.available_actions = {}

    def type(self, host):
        if 'ARBITER' in self.server_states[host]:
            return 'ARBITER'
        return 'DATABASE'

    def isHealthy(self):
        return len(self.required_actions) == 0

    def hasSinglePrimary(self):
        return len(self.primaries()) == 1

    def chompPort(self, host_port):
        return host_port.partition(':')[0]

    def requireAction(self, host, action):
        if host not in self.required_actions:
            self.required_actions[host] = [action]
        else:
            self.required_actions[host].append(action)

    def availableAction(self, host, action):
        if host not in self.available_actions:
            self.available_actions[host] = [action]
        else:
            self.available_actions[host].append(action)

    def primaries(self):
        primaries = []
        for host, states in self.server_states.items():
            if 'PRIMARY' in states:
                primaries.append(host)
        return primaries

class  PrimaryActions:
    def requiredActions(self, meta):
        self.elect_primary = 'NO_PRIMARY' in meta.cluster_states
        self.multi_primary = 'MULTIPLE_PRIMARIES' in meta.cluster_states
        reset_local = False
        for host_port, states in meta.server_states.items():
            if self.elect_primary:
                if 'UNINITIALIZED' in states:
                    meta.requireAction(host_port, 'INITIALIZE')
                    continue

                if 'SECONDARY' in states:
                    meta.requireAction(host_port, 'FORCE_PRIMARY')
                    continue

            if not self.multi_primary and 'UNINITIALIZED' in states:
                meta.requireAction(host_port, 'ADD')
                continue

            if 'BAD_REPLSET' in states or 'BAD_CONFIG_VERSION' in states:
                reset_local = True
                meta.requireAction(host_port, 'RESET_LOCAL')
                continue

            # Remove orphaned nodes:
            extra = 'EXTRA_NODE '
            for s in states:
                if s.startswith(extra):
                    meta.requireAction(host_port, 'REMOVE_EXTRA ' + s[len(extra):])
        
        # 2nd pass we option to reset databases        
        if len(meta.primaries()) >= 2 and not reset_local:
            for primary in meta.primaries():
                # multiple otherwise healthy primaries? sofie's choice 
                # give action to obliterate all, but from ui they'll
                # only really get to obilterate one.
                meta.requireAction(primary, 'FORCE_SECONDARY')

    def availableActions(self, meta):
        pass                
                
action_models.append(PrimaryActions())

class ServerActions:
    def requiredActions(self, meta):
        for host_port, states in meta.server_states.items():
            if 'UNAVAILABLE' in states:
                meta.requireAction(host_port, 'START')
                continue

            if 'MISSING_MEMBER_META' in states:
                meta.requireAction(host_port, 'SET_MEMBER_META')
                continue

            # NOTE: Restart isn't always nec., it seemed more nec. in mongo <= 2.2 
            # but never the less it is still required in mongo 2.2
            if 'REMOVED' in states and 'MISSING' not in states:
                meta.requireAction(host_port, 'RESTART')
                continue

    def availableActions(self, meta):
        for host_port, states in meta.server_states.items():
            meta.availableAction(host_port, 'RESTART')

action_models.append(ServerActions())

class AddRemoveActions:
    def requiredActions(self, meta):
        primaries = meta.primaries()
        if len(primaries) == 1:
            for host_port, states in meta.server_states.items():
                if 'MISSING' in states:
                    meta.requireAction(host_port, 'ADD')
                    continue
                if len(meta.server_states) > 1:
                    if host_port not in meta.server_states:
                        meta.requireAction(host_port, 'REMOVE')

    def availableActions(self, meta):
        pass

action_models.append(AddRemoveActions())

class MongoActionModel:
    def __init__(self, io):
        lines = io.read()
        self.meta = json.loads(lines)

    def analyze(self):
        meta = ActionMeta(self.meta['model'], self.meta['cluster'], self.meta['states'])
        for action_model in action_models:
            action_model.requiredActions(meta)

        for action_model in action_models:
            action_model.availableActions(meta)

        out = {"model" : meta.model, "required" : meta.required_actions, "available" : meta.available_actions}
        sys.stdout.write(json.dumps(out, indent=4, separators=(',', ': ')))
        print

if __name__ == '__main__':
    c = None
    # Parse arguments
    parser = argparse.ArgumentParser(
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
        description='Mongo/sipXecs administration tools'
        )
    parser.formatter_class = argparse.ArgumentDefaultsHelpFormatter
    parser.add_argument('--verbose', action="store_true", default=False,
                help='verbose output')
    args = vars(parser.parse_args())

    try:
        level = None
        if args['verbose']:
            level = logging.DEBUG        
        logging.basicConfig(
            level=level,
            format='.%(message)s'
        )

        actions = MongoActionModel(sys.stdin)
        actions.analyze()

    except :
        sys.stderr.write(traceback.format_exc())
        sys.stderr.write('\n')
        exit(1)
            
    finally:
        if c != None:
            logging.debug('closing connection')
            c.close()
