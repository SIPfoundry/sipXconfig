#! /bin/sh
#
# freeswitch:       Starts the freeswitch Daemon
#
# chkconfig: 345 96 02
# processname: freeswitch
# description: Freeswitch fedora init script \
# config:
# Author: gled

# Source function library.
. /etc/init.d/functions
. /etc/sysconfig/network
. @SIPX_LIBEXECDIR@/sipx-utils.sh || { echo_failure; echo; exit $ENOENT; }

PATH=/sbin:/usr/sbin:/bin:/usr/bin:@FREESWITCH_PREFIX@/bin
DESC="FreeSwitch Voice Switching System"
NAME=freeswitch
DAEMON=$NAME
FS_USER=freeswitch
FS_GROUP=daemon
FS_CLI=fs_cli
DAEMON_ARGS="\
  -conf @SIPX_FSCONFDIR@/sipxpbx/conf \
  -db @SIPX_FSDBDIR@ \
  -log @SIPX_FSLOGDIR@ \
  -run @SIPX_FSRUNDIR@ \
  -htdocs @SIPX_FSCONFDIR@/sipxpbx/conf/htdoc"
DAEMON_START_ARGS="-nc -nonat \
  -u $FS_USER \
  -g $FS_GROUP \
   $DAEMON_ARGS"
DAEMON_STOP_ARGS="-stop \
   $DAEMON_ARGS"
PIDFILE=@SIPX_FSRUNDIR@/freeswitch.pid

do_setlimits() {
        ulimit -c unlimited
        ulimit -d unlimited
        ulimit -f unlimited
        ulimit -i unlimited
        ulimit -n 999999
        ulimit -q unlimited
        ulimit -u unlimited
        ulimit -v unlimited
        ulimit -x unlimited
        ulimit -s 240
        ulimit -l unlimited
        return 0
}

do_permission_check() {
  # Ensure that important FreeSWITCH files are writeable by freeswitch
  FS_DBDIR=@SIPX_FSDBDIR@
  if test ! -e $FS_DBDIR
  then
    mkdir $FS_DBDIR
    chown -R $FS_USER:$FS_GROUP $FS_DBDIR
    chmod -R u+rwX,ga+rX $FS_DBDIR
  fi
}

do_audio_setup() {
  # Ensure that the audio devices are owned by freeswitch
  # This is required for proper FreeSWITCH operation.
  for dev in /dev/adsp /dev/audio /dev/dsp /dev/mixer /dev/sequencer /dev/sequencer2 ; do
    if test -e $dev
    then
        chown $FS_USER $dev
    fi
  done

  # If alsa present configure the sound input source used for MOH to be 'Line'
  if test -d /dev/snd
  then
    chown $FS_USER /dev/snd/*
    amixer cset iface=MIXER,name="Input Source",index=0 "Line" >& /dev/null
    amixer cset iface=MIXER,name="Capture Switch",index=0 on >& /dev/null
    amixer cset iface=MIXER,name="Capture Volume",index=0 60% >& /dev/null
  fi
}

base=${0##*/}

do_start() {
  checkRunningInstance $FS_USER $DAEMON $NAME > /dev/null
  RETVAL=$?
  [ $RETVAL -eq 0 ] && { echo -n "$NAME $runningError"; echo_failure; echo; exit $ERUNNING; }
  do_setlimits
  do_permission_check
  do_audio_setup
  $DAEMON $DAEMON_START_ARGS
  RETVAL=$?

  if [ $# -gt 0 ]; then
    #check if process spawned
    checkRunningInstanceTimeout $FS_USER $DAEMON
    RETVAL=$?
    [ $RETVAL -eq 0 ] || { echo_failure; echo; exit $ESRCH; }
    checkIfListening $NAME
    RETVAL=$?
    [ $RETVAL -eq 0 ] || { echo_failure; echo; exit $ENOSCKT; }
    [ $RETVAL -eq 0 ] && { echo_success; echo; }
  else
    [ $RETVAL -eq 0 ] && { echo_success; echo; }
    [ $RETVAL -eq 0 ] || { echo_failure; echo; }
    return $RETVAL
  fi
}

do_stop() {
  fspid=$(pidof $NAME)
  status=$?
  $DAEMON $DAEMON_STOP_ARGS
  RETVAL=$?
  [ $RETVAL = 0 ] && success $"$base shutdown" || failure $"$base shutdown"
  echo "Waiting for daemon to exit..."
  i=0
  while [[ $status -lt 1 && $i -lt 10 ]]
    do
    sleep 1
      fspid=$(pidof $NAME)
  status=$?
  i=$(expr $i + 1)
  done
  if [ $status -lt 1 ]; then
    echo "Process did not exit cleanly. Aborting..."
    killproc $NAME
  fi
  rm -f $LOCKFILE
  echo
  killAnyOrphans $FS_USER $DAEMON
  return $RETVAL
}

do_reload() {
  $FS_CLI -x "reloadXml"
  RETVAL=$?
  echo
  return $RETVAL
}

do_restart() {
  do_stop
  do_start $withCheck
}

do_asyncrestart() {
  do_stop
  do_start
}

# See how we were called.
case "$1" in
  start)
    do_start $withCheck
    ;;
  stop)
    do_stop
    ;;
  reload)
    do_reload
    ;;
  restart)
    do_restart
    ;;
  asyncrestart)
    do_asyncrestart
    ;;
  status)
    checkRunningInstance $FS_USER $DAEMON $NAME
    ;;
  *)
    echo $"Usage: $0 {start|stop|status}"
    exit $EINCORRECTUSAGE
    ;;
esac

exit $RETVAL