#!/bin/sh

. @SIPX_LIBEXECDIR@/sipx-utils.sh
Status=0
Action=RUN
PidFile=@SIPX_RUNDIR@/tunnel.pid

onStart() {
    echo $$ > ${PidFile}    
    echo "Starting client to connect to allow connections to other systems..."
    stunnel @SIPX_CONFDIR@/tunnel/client.conf >> @SIPX_LOGDIR@/tunnel-client.log 2>&1 &
    ClientPID=$!
    echo "Starting server to allow connections from other systems..."
    stunnel @SIPX_CONFDIR@/tunnel/server.conf >> @SIPX_LOGDIR@/tunnel-server.log 2>&1 &
    ServerPID=$!    
    # kill -9 spawned processes
    trap "echo 'shutting down'; kill -9 ${ClientPID}; kill -9 ${ServerPID}; exit 0" INT TERM
    echo "Waiting for exit..."
    wait
}

onStop() {
    sipx_stop tunnel ${PidFile}
}

checkResult() {
    if [ "$1" -eq "0" ]; then echo "OK"; else echo "Failed"; fi
    Status=$[$Status + $1]
}

onConfigTest() {
    echo -n "Checking config files.."
    test -f @SIPX_CONFDIR@/tunnel/client.conf && \
	test -f @SIPX_CONFDIR@/tunnel/server.conf
    checkResult $?
}

while [ $# -ne 0 ]
do
    case ${1} in
        -c|--configtest)
            Action=CONFIGTEST
            ;;

        --stop)
            Action=STOP
            ;;

        -h|--help|*)
            Action=HELP
            ;;
    esac

    shift # always consume 1
done

if [ ${Action} = CONFIGTEST ]
then
    onConfigTest
    exit $Status
elif [ ${Action} = RUN ]
then
    onConfigTest
    onStart
elif [ ${Action} = STOP ]
then
    onStop
elif [ ${Action} = HELP ]
then

cat <<USAGE
Usage: sipx-tunnel [-s|--stop]
                    [-c|--configtest]
                    [-h|--help]

Start a tunnel client and server to other sipx systems

Options include:

  none                 Starts the tunnel
 
  --stop               Stop the currently running process

  --configtest         Run diagnostics

USAGE

fi
