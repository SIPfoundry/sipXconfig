#!/bin/env python

# Copyright (c) 2013 eZuce, Inc. All rights reserved. 
# Contributed to SIPfoundry under a Contributor Agreement 
# 
# This software is free software; you can redistribute it and/or modify it under 
# the terms of the Affero General Public License (AGPL) as published by the 
# Free Software Foundation; either version 3 of the License, or (at your option) 
# any later version. 
# 
# This software is distributed in the hope that it will be useful, but WITHOUT 
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS 
# FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more 
# details.

# This script copies documents from one database into another. This assumes
# the documents in the destination include a "shardId" attribute and this
# script drops all records in destination *before* copying in new data.  Once
# data is copied, then the mongooplog tool can be run to keep new changes from
# source into destination

from pymongo.mongo_client import MongoClient
from pymongo.database import Database
from pymongo.errors import DuplicateKeyError, ConnectionFailure

import sys
import time
import traceback
import logging
import argparse
import json
import os
from bson.timestamp import Timestamp
import datetime

OP_DELETE = 'd'
OP_INSERT = 'i'
OP_UPDATE = 'u'
OP_COMMAND = 'c'
OP_DB = 'db'
OP_NOOP = 'n'

if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
        description='Mongo/sipXecs copy local database into global database'
        )
    parser.add_argument('--src', metavar="host:port", default="localhost:27019",
                help='Database to copy from')
    parser.add_argument('--dest', metavar="host:port", default="localhost:27017",
                help='Database to copy to')
    parser.add_argument('--verbose', action="store_true", default=False,
                help='verbose output')
    parser.add_argument('--db', metavar="db", required=True,
                help='Name of the database to synchronize')
    parser.add_argument('--starttime', metavar='seconds', type=int, required=True,
                help='Seconds since epoc 1970 UTC.')
    args = vars(parser.parse_args())

    level = None
    if args['verbose']:
        level = logging.DEBUG
    logging.basicConfig(level = level, format = '.%(message)s')

    starttime = Timestamp(args['starttime'], 0)
    db = args['db']
    ns_chop = len(db) + 1

    logging.debug("Source to %s/%s" % (args['src'], db))
    src = Database(MongoClient(host=args['src']), 'local')
    logging.debug("Destination %s/%s" % (args['dest'], db))
    try :
        dest = Database(MongoClient(host=args['dest']), db)

        oplog = src['oplog.rs']
        ops = [{"op" : OP_DELETE}, {"op" : OP_INSERT}, {"op": OP_UPDATE}]
        q = {"ns" : {"$regex" : db + '.*'}, "ts" : {"$gt" : starttime}, "$or" : ops}
        changes = oplog.find(q).sort('$natural', -1) #backwards?
        for change in changes:
            collection = change['ns'][ns_chop:]
            if collection == 'system.indexes':
                continue
            if '_id' not in change['o']:
                logging.debug("Ignore operation, no _id")
                continue
            logging.debug("%s/%s/%s" % (collection, change['op'], change['o']['_id']))
            if change['op'] == OP_DELETE:
                dest[collection].remove(change['o'])
            elif change['op'] == OP_INSERT:
                try:
                    dest[collection].insert(change['o'])
                except DuplicateKeyError:
                    logging.debug('already applied')
            elif change['op'] == OP_UPDATE:
                dest[collection].update(change['o2'], change['o'])

    except ConnectionFailure as e:
        logging.error(e)
        exit(1)
