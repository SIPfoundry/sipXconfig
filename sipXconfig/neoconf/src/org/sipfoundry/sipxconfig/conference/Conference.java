/*
 * 
 * 
 * Copyright (C) 2007 Pingtel Corp., certain elements licensed under a Contributor Agreement.  
 * Contributors retain copyright to elements licensed under a Contributor Agreement.
 * Licensed to the User under the LGPL license.
 * 
 * $
 */
package org.sipfoundry.sipxconfig.conference;

import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.text.MessageFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang.RandomStringUtils;
import org.apache.commons.lang.StringUtils;
import org.sipfoundry.sipxconfig.admin.forwarding.AliasMapping;
import org.sipfoundry.sipxconfig.common.NamedObject;
import org.sipfoundry.sipxconfig.common.SipUri;
import org.sipfoundry.sipxconfig.setting.BeanWithSettings;
import org.sipfoundry.sipxconfig.setting.ProfileNameHandler;
import org.sipfoundry.sipxconfig.setting.Setting;
import org.sipfoundry.sipxconfig.setting.SettingEntry;
import org.sipfoundry.sipxconfig.setting.SettingValue;
import org.sipfoundry.sipxconfig.setting.SettingValueImpl;

public class Conference extends BeanWithSettings implements NamedObject {
    public static final String BEAN_NAME = "conferenceConference";

    /**
     * default lengths of autogenerated access code
     */
    public static final int CODE_LEN = 4;
    public static final int SECRET_LEN = 9;

    // settings names
    public static final String ORGANIZER_CODE = "bridge-conference/organizer-code";
    public static final String PARTICIPANT_CODE = "bridge-conference/participant-code";
    public static final String REMOTE_ADMIT_SECRET = "bridge-conference/BOSTON_BRIDGE_CONFERENCE.REMOTE_ADMIT.SECRET";
    public static final String AOR_RECORD = "bridge-conference/BOSTON_BRIDGE_CONFERENCE.AOR";

    private static final String ADMISSION_SCRIPT_URL = "https://{0}/cgi-bin/cbadmission/cbadmission.cgi"
            + "?action=conferencebridge&confid={1}&name=cbadmission";

    private boolean m_enabled;

    private String m_name;

    private String m_description;

    private String m_extension;

    private Bridge m_bridge;

    /** location - host:port of the conference scripts that admission server needs to retrieve */
    private String m_admissionScriptServer;

    private ConferenceAorDefaults m_defaults;

    public Conference() {
        m_defaults = new ConferenceAorDefaults(this);
    }

    public void initialize() {
        addDefaultBeanSettingHandler(m_defaults);
        getSettingModel2().setDefaultProfileNameHandler(new ConferenceProfileName(this));
    }

    protected Setting loadSettings() {
        return getModelFilesContext().loadModelFile("sipxconference/conference.xml");
    }

    public String getDescription() {
        return m_description;
    }

    public void setDescription(String description) {
        m_description = description;
    }

    public boolean isEnabled() {
        return m_enabled;
    }

    public void setEnabled(boolean enabled) {
        m_enabled = enabled;
    }

    public String getName() {
        return m_name;
    }

    public void setName(String name) {
        m_name = name;
    }

    public Bridge getBridge() {
        return m_bridge;
    }

    public void setBridge(Bridge bridge) {
        m_bridge = bridge;
    }

    public String getExtension() {
        return m_extension;
    }

    public void setExtension(String extension) {
        m_extension = extension;
    }

    public void generateAccessCodes() {
        m_defaults.generateAccessCodes();
    }

    public String getRemoteAdmitSecret() {
        return getSettingValue(REMOTE_ADMIT_SECRET);
    }

    /**
     * It is called by deployment module every time we provision the bridge
     * 
     */
    public void generateRemoteAdmitSecret() {
        m_defaults.generateRemoteAdmitSecret();
    }

    public String getOrganizerAccessCode() {
        return getSettingValue(ORGANIZER_CODE);
    }

    public String getParticipantAccessCode() {
        return getSettingValue(PARTICIPANT_CODE);
    }

    public String getUri() {
        return getSettingValue(AOR_RECORD);
    }

    public void setAdmissionScriptServer(String admissionScriptServer) {
        m_admissionScriptServer = admissionScriptServer;
    }

    @Override
    public void setSettingValue(String path, String value) {
        if (AOR_RECORD.equals(path)) {
            throw new UnsupportedOperationException("cannot change AOR");
        }
        super.setSettingValue(path, value);
    }

    public static class ConferenceAorDefaults {
        private Conference m_conference;
        private String m_participantCode;
        private String m_organizerCode;
        private String m_remoteSecretAgent;

        ConferenceAorDefaults(Conference conference) {
            m_conference = conference;
        }

        void generateRemoteAdmitSecret() {
            m_remoteSecretAgent = RandomStringUtils.randomAlphanumeric(SECRET_LEN);
        }

        void generateAccessCodes() {
            m_organizerCode = RandomStringUtils.randomNumeric(CODE_LEN);
            m_participantCode = RandomStringUtils.randomNumeric(CODE_LEN);
        }

        @SettingEntry(path = AOR_RECORD)
        public String getAorRecord() {
            String user = m_conference.getName();
            String host = m_conference.getBridge().getHost();
            return SipUri.format(user, host, false);
        }

        @SettingEntry(path = PARTICIPANT_CODE)
        public String getParticipantCode() {
            return m_participantCode;
        }

        @SettingEntry(path = ORGANIZER_CODE)
        public String getOrganizerCode() {
            return m_organizerCode;
        }

        @SettingEntry(path = REMOTE_ADMIT_SECRET)
        public String getRemoteAdmitSecret() {
            return m_remoteSecretAgent;
        }
    }

    public static class ConferenceProfileName implements ProfileNameHandler {
        private static final char SEPARATOR = '.';
        private final Conference m_conference;

        ConferenceProfileName(Conference conference) {
            m_conference = conference;
        }

        public SettingValue getProfileName(Setting setting) {
            String nameToken = SEPARATOR + m_conference.getName();
            String profileName = setting.getProfileName();
            StringBuffer buffer = new StringBuffer(profileName);
            int dotIndex = profileName.indexOf(SEPARATOR);
            if (dotIndex > 0) {
                buffer.insert(dotIndex, nameToken);
            } else {
                buffer.append(nameToken);
            }

            return new SettingValueImpl(buffer.toString());
        }
    }

    /**
     * Generates two alias mappings for a conference:
     * 
     * extension@domain ==> name@domainm and name@domain ==>> media server
     * 
     * @param domainName
     * 
     * @return list of aliase mappings, empty list if conference is disabled
     */
    public List generateAliases(String domainName) {
        if (!isEnabled()) {
            return Collections.EMPTY_LIST;
        }
        ArrayList aliases = new ArrayList();
        if (StringUtils.isNotBlank(m_extension)) {
            // add extension mapping
            String extensionUri = AliasMapping.createUri(m_extension, domainName);
            String identityUri = SipUri.format(m_name, domainName, false);
            AliasMapping extensionAlias = new AliasMapping(extensionUri, identityUri);
            aliases.add(extensionAlias);
        }
        aliases.add(createAdmissionAlias(domainName));
        return aliases;
    }

    private AliasMapping createAdmissionAlias(String domainName) {
        try {
            Object[] params = {
                m_admissionScriptServer, m_name
            };
            String admissionScriptUrl = MessageFormat.format(ADMISSION_SCRIPT_URL, params);
            admissionScriptUrl = URLEncoder.encode(admissionScriptUrl, "UTF-8");
            Map urlParams = new HashMap();
            urlParams.put("play", admissionScriptUrl);
            String admission = SipUri.format(m_name, getBridge().getAdmissionServer(), urlParams);
            String identity = AliasMapping.createUri(m_name, domainName);

            return new AliasMapping(identity, admission);
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(e);
        }
    }
}
