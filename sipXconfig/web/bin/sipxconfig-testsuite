#!/bin/bash

# Unit tests for sipx-upgrade
Path=`dirname $0`
source ${Path}/shell-unit

# echo is a way to capture command output
setUp() {
  JavaCmd="echo java"
  Configpp="echo configpp"
  SubstituteUser="echo su"
  Psql="echo psql"
  Chown="echo chown"
  TmpDir=/tmp
  PidFile=${TmpDir}/pidfile
  ConfigDefs=${TmpDir}/config.defs
  ConfigFiles="${TmpDir}/sipxconfig.properties  ${TmpDir}/topology.xml"
  LibDir=${Path}/../../lib
  NewLine="
"
  RunningUser=$USER
}

setUp
source ${Path}/sipxconfig.sh.in --nop

##------------------------------------
# test functions
##------------------------------------
testRunConfigPp() {
  touch ${ConfigDefs}
  for i in $ConfigFiles ; do  
    touch $i.in    
  	Expected="${Expected}${NewLine}configpp --defs ${ConfigDefs} --in $i.in --out $i"
  done	
  Actual="`runConfigpp`"
  # need to prepend newline characted to Actual before comparison
  assertEquals "${Expected}" "${NewLine}${Actual}"
}

testClasspath() {
  touch ${TmpDir}/xxxxxxxxxxx1
  touch ${TmpDir}/xxxxxxxxxxx2
  Actual=`classpath ${TmpDir}/xxxxxxxxxxx*`
  Expected=${TmpDir}/xxxxxxxxxxx1:${TmpDir}/xxxxxxxxxxx2
  assertEquals "$Expected" "$Actual"
}

testDatabaseCommand() {
  Actual=`databaseCommand command1 command2`
  Expected="java -classpath ${LibDir}/xercesImpl-2.6.2.jar:${LibDir}/xml-apis.jar:${LibDir}/ant-1.6.5.jar:${LibDir}/ant-launcher-1.6.5.jar org.apache.tools.ant.launch.Launcher -Dlib.dir=${LibDir} -f @sipxpbx.conf.dir@/database/database.xml command1 command2"
  assertEquals "${Expected}" "${Actual}"

  assertTrue [ -f $PidFile ]
}

testPostgresService() {
  POSTGRES_SERVICE=X
  assertEquals "X" `postgresService`
  unset POSTGRES_SERVICE
  assertNotEquals "X" `postgresService`  
}

testDatabaseCheck() {
  Psql=echo
  assertTrue ! databaseCheck
  Psql="echo SIPXCONFIG"
  assertTrue databaseCheck
}

testPostgresSetup() {
  ServiceDir="echo /etc/init.d"
  PGDATA=${TmpDir}/testPostgresSetup`date +%N`
  mkdir -p $PGDATA
  touch $PGDATA/pg_hba.conf
  echo "#tcpip_socket = false" > $PGDATA/postgresql.conf

  Expected=`cat <<EOF
/etc/init.d/postgresql stop
su - postgres -c initdb --pgdata=$PGDATA
chown postgres:postgres $PGDATA/postgresql.conf
chown postgres:postgres $PGDATA/postmaster.opts.default
/etc/init.d/postgresql start
EOF
`
  Actual=`postgresSetup` 2> /dev/null

  assertEquals "$Expected" "$Actual"
  assertTrue [ -f $PGDATA/pg_hba.conf.sipx.bak ]
  assertEquals "-i" `cat $PGDATA/postmaster.opts.default`

  Expected=`cat <<EOF
host all all 127.0.0.1 255.255.255.255 trust
local all all trust
EOF
`
  Actual=`cat $PGDATA/pg_hba.conf`
  assertEquals "$Expected" "$Actual"

  Expected=`cat <<EOF
tcpip_socket = true
EOF
`
  Actual=`cat $PGDATA/postgresql.conf`
  assertEquals "$Expected" "$Actual"

  # rm -r $PGDATA
}

testRunningUserCheck() {
  runningUserCheck
  
  RunningUser=bogus
  Actual=`runningUserCheck 2>&1`
  assertEquals "Only user @sipxpbx.user@ can run this command." "$Actual"
}

##------------------------------------
# test suite
##------------------------------------
runTest testRunConfigPp
runTest testClasspath
runTest testPostgresService
runTest testPostgresSetup
runTest testRunningUserCheck

# not working because they probably we're updated, difficult to capture 
#   expected results so commenting out for now
# runTest testDatabaseCommand
# runTest testDatabaseCheck

