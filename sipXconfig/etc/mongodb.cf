# Copyright (c) 2012 eZuce, Inc. All rights reserved.
# Contributed to SIPfoundry under a Contributor Agreement

# This software is free software; you can redistribute it and/or modify it under
# the terms of the Affero General Public License (AGPL) as published by the
# Free Software Foundation; either version 3 of the License, or (at your option)
# any later version.

# This software is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more
# details.

# Mongo configuration for sipXecs

bundle agent mongodb {
  vars:
    any::
      "config_arbiter" string => "/etc/mongod-arbiter.conf";
      "config_local" string => "/etc/mongo-local.conf";
      "config_local_arbiter" string => "/etc/mongo-local-arbiter.conf";
      "id" string => "mongodb";
      "config" string => "/etc/mongod.conf";
      "user" string => "mongod";
      "group" string => "mongod";

  classes:
    "any_mongo" expression => "mongod|mongod_arbiter|mongo_local|mongo_local_arbiter";

  methods:
    mongod::
      "any" usebundle => mongodb_config;

    mongod_arbiter::
      "any" usebundle => mongodb_arbiter_config;

    mongo_local::
      "any" usebundle => mongo_local_config;
      
    !mongo_local::
      "any" usebundle => mongo_local_config;

    mongo_local_arbiter::
      "any" usebundle => mongo_local_arbiter_config;

    any_mongo::
      "any" usebundle => allow_ssh_command("mongodb-admin");
      "any" usebundle => rh_chkconfig_status("disable-transparent-hugepages on");

    !any_mongo::
      "any" usebundle => disallow_ssh_command("mongodb-admin");
      "any" usebundle => rh_chkconfig_status("disable-transparent-hugepages off");

    any::
      "any" usebundle => mongodb_running;
      "any" usebundle => mongodb_arbiter_running;
      "any" usebundle => mongo_local_running;
      "any" usebundle => mongo_local_arbiter_running;

    primary.setup::
      "any" usebundle => mongodb_initialize;

    any::
      # at this moment, all setups get mongo client config
      "any" usebundle => mongodb_client;
      # start mongo sync with proper mongo-local.ini and mongo-client.ini config files
      "any" usebundle => mongo_local_sync;

    sipxlogwatcher::
      "any" usebundle => mongo_logwatcher;
}

bundle agent mongo_logwatcher {
  files:
    "$(sipx.SIPX_CONFDIR)/sipxlogwatcher.d/mongo.tmp"
      comment => "mongo log watcher",
      create => "true",
      perms => m(644),
      transformer => "$(sipx.SIPX_LIBEXECDIR)/sipxlogwatcher-maker --in $(sipx.SIPX_CFDATA)/$(sipx.location_id)/alarms.yaml --template $(sipx.SIPX_CONFDIR)/mongo/mongo.sec.erb --out $(this.promiser)";      
      
    "$(sipx.SIPX_CONFDIR)/sipxlogwatcher.d/mongo.sec"
      comment => "mongo log watcher",
      create => "true",
      perms => m(644),
      copy_from => local_cp_by_digest("$(sipx.SIPX_CONFDIR)/sipxlogwatcher.d/mongo.tmp"),
      classes => if_repaired("reload_sipxlogwatcher");      
}

bundle agent mongodb_arbiter_config {
  vars:
    mongod_arbiter::
      "dirs" slist => {
        "/var/lib/mongod-arbiter",
        "/var/run/$(mongodb.id)",
        "/var/log/mongodb/arbiter"
      };

  files:
    mongod_arbiter::
      "$(dirs)/."
        comment => "required mongo dirs $(this.promiser)",
        create => "true",
        perms => mog(755,"$(mongodb.user)","$(mongodb.group)");

      "$(mongodb.config_arbiter)"
        comment => "install mongo arbiter config $(this.promiser)",
        create => "true",
        perms => m("644"),
        edit_defaults => empty,
        edit_line => mongodb_arbiter_config_contents,
        classes => if_repaired("restart_mongo_arbiter");

      "/etc/logrotate.d/mongodb-arbiter"
        comment => "Log rotation config for mongodb arbiter",
        perms => mog("644", "root", "root"),
        create => "true",
        edit_defaults => empty,
        edit_line => mongo_arbiter_logrotate_contents;
}

bundle edit_line mongodb_arbiter_config_contents {
  insert_lines:
    any::
      "systemLog:";
      "  destination: file";
      "  logAppend: true";
      "  logRotate: reopen";
      "  path: /var/log/mongodb/mongod-arbiter.log";
      "storage:";
      "  dbPath: /var/lib/mongod-arbiter";
      "  journal:";
      "    enabled: true";
      "  mmapv1:";
      "    smallFiles: true";
      "processManagement:";
      "  fork: true";
      "  pidFilePath: /var/run/mongodb/mongod.pid";
      "net:";
      "  port: 27018";
      "  bindIp: 0.0.0.0";
      "replication:";
      "  replSetName: sipxecs";                 
  delete_lines:
    any::
      ".*";
}

bundle edit_line mongo_arbiter_logrotate_contents {
  insert_lines:
"/var/log/$(mongodb.id)/arbiter/mongodb.log {
       weekly
       rotate 10
       copytruncate
       delaycompress
       compress
       notifempty
       missingok
       postrotate
          /bin/kill -USR1 `cat /var/run/$(mongodb.id)/mongodb-arbiter.pid 2>/dev/null` 2> /dev/null|| true
       endscript
}
";
}


bundle agent mongo_local_config {
  vars:
    any::
      "dirs" slist => {
        "/var/lib/mongo-local",
        "/var/run/$(mongodb.id)",
        "/var/log/mongodb/local"
      };

  files:
    mongo_local::
      "$(dirs)/."
        comment => "required mongo local dirs $(this.promiser)",
        create => "true",
        perms => mog(755,"$(mongodb.user)","$(mongodb.group)");

      "$(mongodb.config_local)"
        comment => "install mongo local config $(this.promiser)",
        create => "true",
        perms => m("644"),
        edit_defaults => empty,
        edit_line => mongo_local_config_contents,
        classes => if_repaired("restart_mongo_local");
        
      "/etc/logrotate.d/mongodb-local"
        comment => "Log rotation config for local mongodb",
        perms => mog("644", "root", "root"),
        create => "true",
        edit_defaults => empty,
        edit_line => mongo_local_logrotate_contents;

}

body delete tidyfiles {
     dirlinks => "delete";
     rmdirs   => "true";
 }

body file_select all {
  leaf_name => { ".*" };
  file_result => "leaf_name";
}


bundle edit_line mongo_local_config_contents {
  insert_lines:
    any::
      "systemLog:";
      "  destination: file";
      "  logAppend: true";
      "  logRotate: reopen";
      "  path: /var/log/$(mongodb.id)/local/mongodb.log";
      "storage:";
      "  dbPath: /var/lib/mongo-local";
      "  journal:";
      "    enabled: true";
      "  mmapv1:";
      "    smallFiles: true";
      "processManagement:";
      "  fork: true";
      "  pidFilePath: /var/run/mongodb/local.pid";
      "net:";
      "  port: 27019";
      "  bindIp: 0.0.0.0";
      "replication:";
      "  replSetName: sipxlocal";                 
  delete_lines:
    any::
      ".*";
}

bundle agent mongo_local_sync {
  vars:
    any::
      "service" string => "mongodb-sync.service";

  classes:
    any::
      "mongo_sync_running" expression => returnszero("$(sipx.systemctl) is-active $(service)","noshell");

  commands:
    (!mongo_local|stop_sipxecs).mongo_sync_running::
      "$(sipx.systemctl)"
        comment => "stop mongo sync",
        args => "stop $(service)";

      "$(sipx.systemctl)"
        comment => "disable mongo sync",
        args => "disable $(service)";

    mongo_local.!mongo_sync_running.!stop_sipxecs::
      "$(sipx.systemctl)"
        comment => "start mongo sync",
        args => "start $(service)";

      "$(sipx.systemctl)"
        comment => "enable mongo sync",
        args => "enable $(service)";

    mongo_local.mongo_sync_running.(mongo_local_reconnect|mongo_client_reconnect|restart_mongo_sync|restart_sipxecs)::
      "$(sipx.systemctl)"
        comment => "restart mongo sync",
        args => "restart $(service)";
}

bundle edit_line mongo_local_logrotate_contents {
  insert_lines:
"/var/log/$(mongodb.id)/local/mongodb.log {
       weekly
       rotate 10
       copytruncate
       delaycompress
       compress
       notifempty
       missingok
       postrotate
          /bin/kill -USR1 `cat /var/run/$(mongodb.id)/local.pid 2>/dev/null` 2> /dev/null|| true
       endscript
}
";
}

bundle agent mongo_local_arbiter_config {
  vars:
    any::
      "dirs" slist => {
        "/var/lib/mongo-local-arbiter",
        "/var/run/$(mongodb.id)",
        "/var/log/mongodb/local"
      };

  files:
    mongo_local_arbiter::
      "$(dirs)/."
        comment => "required mongo arbiter dirs $(this.promiser)",
        create => "true",
        perms => mog(755,"$(mongodb.user)","$(mongodb.group)");

      "$(mongodb.config_local_arbiter)"
        comment => "install mongo local arbiter config $(this.promiser)",
        create => "true",
        perms => m("644"),
        edit_defaults => empty,
        edit_line => mongo_local_arbiter_config_contents,
        classes => if_repaired("restart_mongo_local_arbiter");
}

bundle edit_line mongo_local_arbiter_config_contents {
  insert_lines:
    any::
      "systemLog:";
      "  destination: file";
      "  logAppend: true";
      "  logRotate: reopen";
      "  path: /var/log/$(mongodb.id)/local/local-arbiter.log";
      "storage:";
      "  dbPath: /var/lib/mongo-local-arbiter";
      "  journal:";
      "    enabled: true";
      "  mmapv1:";
      "    smallFiles: true";
      "processManagement:";
      "  fork: true";
      "  pidFilePath: /var/run/mongodb/local-arbiter.pid";
      "net:";
      "  port: 27020";
      "  bindIp: 0.0.0.0";
      "replication:";
      "  replSetName: sipxlocal";                 
  delete_lines:
    any::
      ".*";
}

# mongod.conf is the only file we attempt to merge our settings into
# to preserve any tweaks to config file admin makes outside sipxconfig
bundle agent mongodb_config {
  vars:
    any::
      "server[replSet]" string => "sipxecs";
      "server[port]" string => "27017";
      "server[smallfiles]" string => "true";
      "server[bind_ip]" string => "0.0.0.0";

  files:
    any::
      "$(mongodb.config)"
        comment => "install mongo config $(this.promiser)",
        create => "true",
        perms => m("644"),
        edit_line => mongodb_config_contents,
        classes => if_repaired("restart_mongod");

      "/etc/security/limits.d/99-mongodb-nproc.conf"
        comment => "setup mongodb limits",
        create => "true",
        perms => m("644"),
        edit_line => mongodb_limits_contents,
        classes => if_repaired("restart_mongod");
}

bundle edit_line mongodb_config_contents {
  insert_lines:
    any::
      "systemLog:";
      "  destination: file";
      "  logAppend: true";
      "  logRotate: reopen";
      "  path: /var/log/mongodb/mongod.log";
      "storage:";
      "  dbPath: /var/lib/mongo";
      "  journal:";
      "    enabled: true";
      "  mmapv1:";
      "    smallFiles: true";
      "processManagement:";
      "  fork: true";
      "  pidFilePath: /var/run/mongodb/mongod.pid";
      "net:";
      "  port: 27017";
      "  bindIp: 0.0.0.0";
      "replication:";
      "  replSetName: sipxecs";                 
  delete_lines:
    any::
      ".*";
}

bundle edit_line mongodb_limits_contents {
  insert_lines:
"mongod       soft    nproc     64000
mongod       hard    nproc     64000
mongod       soft    nofile    64000
mongod       hard    nofile    64000
";
}

bundle edit_line mongo_client_config {
  vars:
    "config" string => "$(sipx.SIPX_CFDATA)/$(sipx.location_id)/mongo-client.ini";

  classes:
    "has_config" expression => fileexists("$(config)");

  insert_lines:
    has_config::
      "$(config)"
        insert_type => "file";

    # should only be for very first run
    !has_config::
       "connectionUrl=mongodb://$(sipx.host).$(sipx.net_domain):27017/?readPreference=nearest";
       "connectionString=sipxecs/$(sipx.host).$(sipx.net_domain):27017";

  delete_lines:
    ".*";
}

bundle agent mongodb_arbiter_running {
  vars:
    any::
      "service" string => "mongod-arbiter.service";

  classes:
    any::
      "mongo_arbiter_running" expression => returnszero("$(sipx.systemctl) is-active $(service)","noshell");

  commands:
    !mongod_arbiter.mongo_arbiter_running::
      "$(sipx.systemctl)"
        comment => "stop mongo arbiter",
        args => "stop $(service)";

      "$(sipx.systemctl)"
        comment => "disable mongo arbiter",
        args => "disable $(service)";

    mongod_arbiter.!mongo_arbiter_running::
      "$(sipx.systemctl)"
        comment => "start mongo arbiter",
        args => "start $(service)";

      "$(sipx.systemctl)"
        comment => "enable mongo arbiter",
        args => "enable $(service)";

    mongod_arbiter.mongo_arbiter_running.restart_mongo_arbiter::
      "$(sipx.systemctl)"
        comment => "restart mongo arbiter",
        args => "restart $(service)";
}

bundle agent mongo_local_running {
  vars:
    any::
      "service" string => "mongo-local.service";

  classes:
    any::
     "mongo_local_running" expression => returnszero("$(sipx.systemctl) is-active $(service)","noshell");

  commands:
    !mongo_local.mongo_local_running::
      "$(sipx.systemctl)"
        comment => "stop mongo local",
        args => "stop $(service)";

      "$(sipx.systemctl)"
        comment => "disable mongo local",
        args => "disable $(service)";

    mongo_local.!mongo_local_running::
      "$(sipx.systemctl)"
        comment => "start mongo local",
        args => "start $(service)";

      "$(sipx.systemctl)"
        comment => "enable mongo local",
        args => "enable $(service)";

    mongo_local.mongo_local_running.mongo_local_restart::
      "$(sipx.systemctl)"
        comment => "restart mongo local",
        args => "restart $(service)";
}

bundle agent mongo_local_arbiter_running {
  vars:
    any::
      "service" string => "mongo-local-arbiter.service";

  classes:
    any::
      "mongo_local_arbiter_running" expression => returnszero("$(sipx.systemctl) is-active $(service)","noshell");

  commands:
    !mongo_local_arbiter.mongo_local_arbiter_running::
      "$(sipx.systemctl)"
        comment => "stop mongo local arbiter",
        args => "stop $(service)";

      "$(sipx.systemctl)"
        comment => "disable mongo local arbiter",
        args => "disable $(service)";

    mongo_local_arbiter.!mongo_local_arbiter_running::
      "$(sipx.systemctl)"
        comment => "start mongo local arbiter",
        args => "start $(service)";

      "$(sipx.systemctl)"
        comment => "enable mongo local arbiter",
        args => "enable $(service)";

    mongo_local_arbiter.mongo_local_arbiter_running.mongo_local_arbiter_restart::
      "$(sipx.systemctl)"
        comment => "restart mongo local arbiter",
        args => "restart $(service)";
}

bundle agent mongodb_running {
  vars:
    any::
      "service" string => "mongod.service";

  classes:
    any::
      "mongodb_running" expression => returnszero("$(sipx.systemctl) is-active $(service)","noshell");

  commands:
    !mongod.mongodb_running::
      "$(sipx.systemctl)"
        comment => "stop mongo",
        args => "stop $(service)";

      "$(sipx.systemctl)"
        comment => "disable mongo",
        args => "disable $(service)";

    mongod.!mongodb_running::
      "$(sipx.systemctl)"
        comment => "start mongo",
        args => "start $(service)";

      "$(sipx.systemctl)"
        comment => "enable mongo",
        args => "enable $(service)";

    mongod.mongodb_running.(restart_mongod|RESTART_DATABASE)::
      "$(sipx.systemctl)"
        comment => "restart mongo",
        args => "restart $(service)";
}

bundle agent mongodb_client {
  files:
    any::
      # should not change often, we don't want to restart mongod unless
      # absolutely nec..  So sipXconfig should take care the client config
      # file it generates has the same checksum as the original or not generate
      # ini file in cfdata unless it's different.
      "$(sipx.SIPX_CONFDIR)/mongo-client.ini",
        comment => "install mongo client config $(this.promiser)",
        create => "true",
        perms => m("644"),
        edit_line => mongo_client_config,
        classes => if_repaired("mongo_client_reconnect");

    mongo_local::
      "$(sipx.SIPX_CONFDIR)/mongo-local.ini",
        comment => "local mongo db $(this.promiser)",
        create => "true",
        perms => m("644"),
        edit_defaults => empty,
        edit_line => expand_template("$(sipx.SIPX_CFDATA)/$(sipx.location_id)/mongo-local.ini"),
        classes => if_repaired("mongo_local_reconnect");

    !mongo_local::
      "$(sipx.SIPX_CONFDIR)/mongo-local.ini",
        comment => "do not use local mongo db $(this.promiser)",
        delete => unlink,
        classes => if_repaired("mongo_local_reconnect");
}

bundle agent mongodb_initialize {
  vars:
    "config" string => "$(sipx.SIPX_CFDATA)/mongo.json";
    "default_contents" string => "{\"servers\":[\"$(sipx.host).$(sipx.net_domain):27017\"],\"replSet\":\"sipxecs\"}";

  classes:
    "has_config" expression => fileexists("$(config)");

  files:
    !has_config::
      "$(config)",
        comment => "Create initial mongo cluster db model $(this.promiser)",
        create => "true",
        perms => mog("644", "$(sipx.SIPXPBXUSER)", "$(sipx.SIPXPBXGROUP)"),
        edit_line => insert_lines("$(default_contents)");

  commands:
    any::
      "$(sipx.SIPX_BINDIR)/mongodb-admin"
        comment => "Initialize mongodb if it's not already initialized",
        args => "--host_port $(sipx.host).$(sipx.net_domain):27017 INITIALIZE";
}
