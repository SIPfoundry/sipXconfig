# Copyright (c) 2012 eZuce, Inc. All rights reserved.
# Contributed to SIPfoundry under a Contributor Agreement

# This software is free software; you can redistribute it and/or modify it under
# the terms of the Affero General Public License (AGPL) as published by the
# Free Software Foundation; either version 3 of the License, or (at your option)
# any later version.

# This software is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more
# details.

#
# Early initialization for sipxconfig
#

bundle agent 00_sipxconfig {
  methods:
    primary::
      # normally not nec but mongodb need 00_ssh to run first
      "any" usebundle => 00_ssh;

      "any" usebundle => mongodb;
      "any" usebundle => postgres;
      "any" usebundle => sipxcommserverlib;
      "any" usebundle => sipxsupervisor;

  files:
    any::
      "$(sipx.SIPX_CONFDIR)/resource-limits.ini"
        comment => "resource limits ini file",
        create => "true",
        perms => m("644"),
        copy_from => copy_from_cfdata("resource-limits.ini");
    any::
      "$(sipx.SIPX_CONFDIR)/hz-config.xml"
        comment => "hazelcast config file",
        create => "true",
        perms => m("644"),
        copy_from => copy_from_cfdata("$(sipx.location_id)/hz-config.xml");        
    primary::
      "$(sipx.SIPX_CONFDIR)/sipxconfig.properties"
        comment => "sipXconfig configuration $(this.promiser)",
        create => "true",
        perms => mog("644", "root", "root"),
        edit_defaults => empty,
        edit_line => sipxconfig_config;

  commands:
    primary.setup::
      "$(sipx.SIPX_SERVICEDIR)/sipxconfig"
        comment => "generate ssl info $(this.promiser)",
        args => "setup",
        classes => if_notkept("fatal_error");
}

bundle edit_line sipxconfig_config {
  vars:
    "install_config" string => "$(sipx.SIPX_CONFDIR)/sipxconfig/sipxconfig.properties.install";
    "ui_config" string => "$(sipx.SIPX_CFDATA)/1/sipxconfig.properties.ui";

  classes:
    "has_ui_config" expression => fileexists("$(ui_config)");

  insert_lines:
    primary::
      "# Part 1 - from $(install_config)";
      "$(install_config)"
        expand_scalars => "true",
        insert_type => "file";

    primary::
      "# Part 2 - from $(ui_config)";
      "$(ui_config)"
        expand_scalars => "true",
        insert_type => "file";

    # part 3
    primary::
"# Part 3 - from $(sipx.SIPX_CFINPUTS)/plugin.d/00_sipxconfig.cf
sysdir.mongo_ns=
domainManagerImpl.configuredDomain=$(sipx.net_domain)
domainManagerImpl.configuredSipDomain=$(sipx.domain)
domainManagerImpl.configuredRealm=$(sipx.realm)
domainManagerImpl.configuredSecret=$(sipx.secret)
domainManagerImpl.configuredFqdn=$(sipx.host).$(sipx.net_domain)
domainManagerImpl.configuredIp=$(sipx.bind_ip)
locationsManagerImpl.primaryIp=$(sipx.bind_ip)
locationsManagerImpl.primaryFqdn=$(sipx.host).$(sipx.net_domain)
mongoReplicaSetManager.primaryFqdn=$(sipx.host).$(sipx.net_domain)
";

    primary.has_config::
    "# Part 3 - from $(ui_config)";
    "$(ui_config)"
      expand_scalars => "true",
      insert_type => "file";
}
