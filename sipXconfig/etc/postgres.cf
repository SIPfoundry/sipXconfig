# Copyright (c) 2012 eZuce, Inc. All rights reserved.
# Contributed to SIPfoundry under a Contributor Agreement

# This software is free software; you can redistribute it and/or modify it under
# the terms of the Affero General Public License (AGPL) as published by the
# Free Software Foundation; either version 3 of the License, or (at your option)
# any later version.

# This software is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more
# details.

#
# Postgres configuration for working with sipxecs
#

bundle agent postgres {
  methods:
    postgres::
      "any" usebundle => postgres_init;
      "any" usebundle => postgres_config;
    fedora16_or_greater::
      "any" usebundle => postgres_sysctl_running;
    !fedora16_or_greater::
      "any" usebundle => postgres_sysv_running;
}

bundle agent postgres_init {
  classes:
    postgres::
      "initdb" not => fileexists("$(sipx.PGDATA)/PG_VERSION");

  files:
    # postgres very easily gets into a state of half-initialized
    # there the pgdata directory is created and initdb refuses to
    # complete, yet postgres is not fully initialized
    initdb::
      "$(sipx.PGDATA)"
        comment => "clear uninitialized postgres",
        file_select => days_old("0"),
        depth_search => recurse("inf"),
        delete => tidy;

      "$(sipx.PGDATA)/."
        comment => "fix postgres permissions",
        perms => mog("644","$(sipx.POSTGRESQL_USER)","$(sipx.POSTGRESQL_GROUP)");

  commands:
    # Most distributions use a separate command "initdb"
    # to initialize the db which can also be called by
    # starting and stopping server. Although you could call
    # initdb directly there is various other housekeeping that
    # the service script handles so leverage it here.
    fedora16_or_greater.initdb::
      "/usr/bin/postgresql-setup"
        comment => "initialize postgres",
        args => "initdb";

    !fedora16_or_greater.initdb::
      "$(sipx.PG_DAEMON)"
        comment => "initialize postgres",
        args => "initdb";
}

bundle agent postgres_config {
  files:
    postgres::
      "$(sipx.PGDATA)/pg_hba.conf"
        comment => "allow local connections to postgres in $(this.promiser)",
        create => "false",
        perms => mog("644","$(sipx.POSTGRESQL_USER)","$(sipx.POSTGRESQL_GROUP)"),
         # only reload is nec. but not bothering to support this atm
        classes => if_repaired("restart_postgres"),
        edit_line => pg_hba_conf;

      "$(sipx.PGDATA)/postgresql.conf"
        comment => "install required postgres settings in $(this.promiser)",
        create => "true",
        perms => mog("644","$(sipx.POSTGRESQL_USER)","$(sipx.POSTGRESQL_GROUP)"),
        classes => if_repaired("restart_postgres"),
        edit_line => postgresql_conf;

      "$(sipx.PGDATA)/postmaster.opts.default"
        comment => "allow tcp connections to postgres in $(this.promiser)",
        create => "true",
        perms => mog("644","$(sipx.POSTGRESQL_USER)","$(sipx.POSTGRESQL_GROUP)"),
        classes => if_repaired("restart_postgres"),
        edit_line => replace_contents("-i");
}

bundle edit_line postgresql_conf {
  insert_lines:
    any::
      # make sure any node can connect to posgresql
      "listen_addresses='*'";
      # makes a difference when row counts get higher both
      # in users table and cdrs.  A database that has not
      # been vacuumed will take 20-30 minutes before it will
      # seen an improvement.  You may have to run manually
      #  psql -U postgres -c 'vacuum'
      "autovacuum = on";
      "autovacuum_naptime = 60";
      "autovacuum_vacuum_threshold = 50";
      "autovacuum_analyze_threshold = 50";
      "autovacuum_vacuum_scale_factor = 0.2";
      "autovacuum_analyze_scale_factor = 0.1";
      "autovacuum_vacuum_cost_delay = 20";
      "autovacuum_vacuum_cost_limit = 0";

    src::
      # allows unit tests to run exponentially faster after using
      # the new truncate sql command. Otherwise this wouldn't be
      # required.
      "fsync = off";

  delete_lines:
    any::
      "(autovacuum_|fsync).*";
}

bundle edit_line pg_hba_conf {
  insert_lines:
    "local all all trust";
    "host all all 127.0.0.1/32 trust";
    "host all all ::1/128 trust";
    # any node in the cluster can connect to postgresql
    "host all all 0.0.0.0/0 trust";
  delete_lines:
    "(host|local).*";
}

bundle agent postgres_sysv_running {
  vars:
    any::
      "service_command" string => "/usr/bin/postmaster";

  methods:
    any::
      "any" usebundle => find_service_by_command("$(service_command)", "postgres_running","$(sipx.POSTGRESQL_USER)");
    postgres::
      "any" usebundle => rh_chkconfig_status("postgresql on");
    !postgres::
      "any" usebundle => rh_chkconfig_status("postgresql off");

  commands:
    !postgres.postgres_running::
      "$(sipx.PG_DAEMON)"
        comment => "stop postgres",
        args => "stop";

    postgres.!postgres_running::
      "$(sipx.PG_DAEMON)"
        comment => "start postgres",
        args => "start";

    postgres.postgres_running.restart_postgres::
      "$(sipx.PG_DAEMON)"
        comment => "restart postgres",
        args => "restart";
}

bundle agent postgres_sysctl_running {
  vars:
    any::
      "service" string => "postgresql.service";

  classes:
    fedora16_or_greater::
      "postgres_running" expression => returnszero("$(sipx.systemctl) is-active $(service)","noshell");

  commands:
    !postgres.postgres_running::
      "$(sipx.systemctl)"
        comment => "stop $(service)",
        args => "stop $(service)";

      "$(sipx.systemctl)"
        comment => "disable $(service)",
        args => "disable $(service)";

    postgres.!postgres_running::
      "$(sipx.systemctl)"
        comment => "start $(service)",
        args => "start $(service)";

      "$(sipx.systemctl)"
        comment => "enable $(service)",
        args => "enable $(service)";

    postgres.postgres_running.restart_postgres::
      "$(sipx.systemctl)"
        comment => "restart $(service)",
        args => "restart $(service)";
}