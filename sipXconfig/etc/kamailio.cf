# Copyright (C) 2015 SIPFoundry., certain elements licensed under a Contributor Agreement.
# Licensed to the User under the LGPL license.
# 
# This library is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
# details.
#

#
# Kamailio configuration for working with sipxecs
#

bundle agent kamailio {
  methods:
    kamailioproxy::
      "any" usebundle => kamailioproxy_config;
      "any" usebundle => kamailio_ensure_table("kamailio-proxy");
    kamailiopresence::
      "any" usebundle => kamailiopresence_config;
      "any" usebundle => kamailio_ensure_table("kamailio-presence");
    any::
      "any" usebundle => "mysql";
      "any" usebundle => kamailio_init;
      "any" usebundle => kamailio_config;
      "any" usebundle => kamailioproxy_running;
      "any" usebundle => kamailiopresence_running;
}

bundle agent kamailio_init {
  vars:
    any::
      "runKamailio" string => "/var/run/kamailio/.";
      "kamctlrc" string => "/etc/kamailio/kamctlrc";

  classes:
    kamailioproxy::
      "kamailioDbProxyExists" expression => fileexists("/var/lib/mysql/kamailioproxy");
    kamailiopresence::
      "kamailioDbPresenceExists" expression => fileexists("/var/lib/mysql/kamailiopresence");

  files:
    "$(runKamailio)"
      perms => kamailio_dir_perms,
      create => "true";

    "$(kamctlrc)"
      perms => m("644"),
      create => "true",
      edit_line => kamctlrc_config_contents();

  commands:
    kamailioproxy.!kamailioDbProxyExists::
      "/usr/sbin/kamdbctl"
       comment => "create kamailio proxy db",
       args => "create kamailioproxy";

    kamailiopresence.!kamailioDbPresenceExists::
      "/usr/sbin/kamdbctl"
       comment => "create kamailio presence db",
       args => "create kamailiopresence";

}

bundle agent kamailio_config {
  files:
    any::
      "$(sipx.SIPX_CONFDIR)/kamailio.default"
        comment => "install $(this.promiser)",
        create => "true",
        perms => m("644"),
        edit_line => kamailio_default_contents();

      "/etc/rsyslog.d/kamailio-proxy-log.conf"
        comment => "Configure kamailio proxy log",
        perms => mog("0600","root","root"),
        create => "true",
        edit_line => kamailio_proxy_log_contents,
        classes => if_repaired("restart_kamailio_log");

      "/etc/rsyslog.d/kamailio-presence-log.conf"
        comment => "Configure kamailio presence log",
        perms => mog("0600","root","root"),
        create => "true",
        edit_line => kamailio_presence_log_contents,
        classes => if_repaired("restart_kamailio_log");
        
   	  "$(sipx.SIPX_CONFDIR)/kamailio-tls.cfg"
        comment => "Configure kamailio TLS",
        create => "true",
        perms => m("644"),
        edit_line => kamailio_tls_config_contents();      
        

  commands:
    restart_kamailio_log.!fedora16_or_greater::
       "/etc/init.d/rsyslog"
        comment => "kamailio - restart rsyslog",
        args => "restart";

    restart_kamailio_log.fedora16_or_greater::
       "$(sipx.systemctl)"
        comment => "kamailio - restart rsyslog",
        args => "restart rsyslogd.service";
}

bundle edit_line kamailio_default_contents() {
 insert_lines:
    any::
      "$(sipx.SIPX_CFDATA)/$(sipx.location_id)/kamailio.default.part"
        insert_type => "file",
        expand_scalars => "true";

  delete_lines:
    any::
      ".*"; 
}

bundle edit_line kamailio_proxy_log_contents {
  insert_lines:
    "local1.*                                                -$(sipx.SIPX_LOGDIR)/kamailio-proxy.log";

  delete_lines:
    any::
      ".*";    
}

bundle edit_line kamailio_presence_log_contents {
  insert_lines:
    "local2.*                                                -$(sipx.SIPX_LOGDIR)/kamailio-presence.log";

  delete_lines:
    any::
      ".*";    
}

bundle agent kamailioproxy_config {
  files:
    any::
      "$(sipx.SIPX_CONFDIR)/kamailio-proxy-config"
        comment => "install $(this.promiser)",
        create => "true",
        perms => m("644"),
        edit_line => kamailio_ingress_config_contents(),
        classes => if_repaired("kamailioproxy_properties_changed");

      "$(sipx.SIPX_CONFDIR)/kamailio-proxy.cfg"
        comment => "install $(this.promiser)",
        create => "true",
        perms => m("644"),
        edit_line => kamailioproxy_config_contents();

}

bundle agent kamailiopresence_config {
  files:
    any::
      "$(sipx.SIPX_CONFDIR)/sipXpresence-config"
        comment => "install $(this.promiser)",
        create => "true",
        perms => m("644"),
        edit_line => sipXpresence_config_contents(),
        classes => if_repaired("kamailiopresence_properties_changed");

      "$(sipx.SIPX_CONFDIR)/kamailio-presence.cfg"
        comment => "install $(this.promiser)",
        create => "true",
        perms => m("644"),
        edit_line => kamailiopresence_config_contents();     

}

bundle agent kamailio_ensure_table(dbname) {
  vars:
    mongod::
      "updateDialogScript" string => "db.getCollection('version').findAndModify({query:{table_name:'dialog'},update:{table_name:'dialog',table_version:NumberInt(7)},upsert:true,new:true})";
      "updateDialogVarsScript" string => "db.getCollection('version').findAndModify({query:{table_name:'dialog_vars'},update:{table_name:'dialog_vars',table_version:NumberInt(1)},upsert:true,new:true})";
      
  commands:
    mongod::
     "/usr/bin/mongo"
       comment => "create mongo kamailio table dialog in $(dbname)",
       args => "$(dbname) --quiet --eval=$(updateDialogScript)";

     "/usr/bin/mongo"
       comment => "create mongo kamailio table dialog_vars in $(dbname)",
       args => "$(dbname) --quiet --eval=$(updateDialogVarsScript)";       
}

bundle edit_line kamctlrc_config_contents() {
 insert_lines:
    any::
      "DBENGINE=MYSQL";
      "INSTALL_EXTRA_TABLES=yes";
      "INSTALL_PRESENCE_TABLES=yes";
      "INSTALL_DBUID_TABLES=yes";
      "PWSKIP=true";

  delete_lines:
    any::
      ".*"; 
}

bundle edit_line kamailio_ingress_config_contents() {
  insert_lines:
    any::
      "$(sipx.SIPX_CFDATA)/$(sipx.location_id)/kamailio-proxy-config.part"
        insert_type => "file",
        expand_scalars => "true";
      "SIPX_INGRESS_BIND_IP : $(sipx.bind_ip)";

  delete_lines:
    any::
      ".*";
}

bundle edit_line sipXpresence_config_contents() {
  insert_lines:
    any::
      "$(sipx.SIPX_CFDATA)/$(sipx.location_id)/sipXpresence-config.part"
        insert_type => "file",
        expand_scalars => "true";
      "SIPX_INGRESS_BIND_IP : $(sipx.bind_ip)";

  delete_lines:
    any::
      ".*";
}

bundle edit_line kamailioproxy_config_contents() {
 insert_lines:
    any::
      "$(sipx.SIPX_CONFDIR)/kamailio/kamailio-proxy.cfg.template"
        insert_type => "file",
        expand_scalars => "true";

    any::
      "$(sipx.SIPX_CFDATA)/$(sipx.location_id)/kamailio-proxy.cfg.global.part"
        insert_type => "file",
        expand_scalars => "true",
        location => kamailio_global_param_location;

    any::
      "$(sipx.SIPX_CFDATA)/$(sipx.location_id)/kamailio-proxy.cfg.custom.part"
        insert_type => "file",
        expand_scalars => "true",
        location => kamailio_custom_param_location;      

  delete_lines:
    any::
      ".*"; 
}

bundle edit_line kamailiopresence_config_contents() {
 insert_lines:
    any::
      "$(sipx.SIPX_CONFDIR)/kamailio/kamailio-presence.cfg.template"
        insert_type => "file",
        expand_scalars => "true";

    any::
      "$(sipx.SIPX_CFDATA)/$(sipx.location_id)/kamailio-presence.cfg.global.part"
        insert_type => "file",
        expand_scalars => "true",
        location => kamailio_global_param_location;

    any::
      "$(sipx.SIPX_CFDATA)/$(sipx.location_id)/kamailio-presence.cfg.custom.part"
        insert_type => "file",
        expand_scalars => "true",
        location => kamailio_custom_param_location;

  delete_lines:
    any::
      ".*"; 
}

bundle edit_line kamailio_tls_config_contents() {
 insert_lines:
    any::
      "$(sipx.SIPX_CONFDIR)/kamailio/kamailio-tls.cfg.template"
        insert_type => "file",
        expand_scalars => "true";

  delete_lines:
    any::
      ".*"; 
}

body location kamailio_global_param_location {
  select_line_matching => "^#+\sGlobal\sParameters\s#+";
  before_after => "after";
  first_last => "first";
}

body location kamailio_custom_param_location {
  select_line_matching => "^#+\sCustom\sParameters\s#+";
  before_after => "after";
  first_last => "first";
}

body perms kamailio_dir_perms
{
  mode => "0740";
}

bundle agent kamailioproxy_running 
{
  vars:
    any::
      "service_command" string => "/usr/sbin/kamailio";
      "daemon" string => "$(sipx.SIPX_SERVICEDIR)/kamailio-proxy";
      "service_user" string => "kamailio";

  classes:
    kamailioproxy.mysql.mysql_running.restart_mysql::
      "restart_kamailioproxy" expression => "any";
    kamailioproxy.kamailioproxy_properties_changed::
      "restart_kamailioproxy" not => fileexists("$(sipx.SIPX_CONFDIR)/kamailio-proxy-config.cf-before-edit");

  methods:
    kamailioproxy::
      "any" usebundle => rh_chkconfig_status("kamailio on");
    !kamailioproxy::
      "any" usebundle => rh_chkconfig_status("kamailio off");
    kamailioproxy.kamailioproxy_properties_changed.!restart_kamailioproxy::
      "kamailioproxy_properties_changed" usebundle => refresh_sip_service("SIPX_INGRESS_LOG_LEVEL : (DEBUG|INFO|NOTICE|WARNING|ERR|ERROR|CRIT|ALERT|EMERG)",
                           "$(sipx.SIPX_CONFDIR)/kamailio-proxy-config",
                           "$(sipx.SIPX_CONFDIR)/kamailio-proxy-config.cf-before-edit",
                           "kamailioproxy");

  commands:
    !kamailioproxy.kamailioproxy_running::
      "$(daemon)"
        comment => "stop kamailio",
        args => "stop";

    kamailioproxy.!kamailioproxy_running::
      "$(daemon)"
        comment => "start kamailio",
        args => "start";

    kamailioproxy.kamailioproxy_running.(restart_kamailioproxy|refresh_kamailioproxy|restart_mysql|mysql_change_password)::
      "$(daemon)"
        comment => "restart kamailio",
        args => "restart";
}

bundle agent kamailiopresence_running 
{
  vars:
    any::
      "service_command" string => "/usr/sbin/kamailio";
      "daemon" string => "$(sipx.SIPX_SERVICEDIR)/kamailio-presence";
      "service_user" string => "kamailio";

  classes:
    kamailiopresence.mysql.mysql_running.restart_mysql::
      "restart_kamailiopresence" expression => "any";
    kamailiopresence.kamailiopresence_properties_changed::
      "restart_kamailiopresence" not => fileexists("$(sipx.SIPX_CONFDIR)/kamailio-presence-config.cf-before-edit");

  methods:
    kamailiopresence::
      "any" usebundle => rh_chkconfig_status("kamailio on");
    !kamailiopresence::
      "any" usebundle => rh_chkconfig_status("kamailio off");
    kamailiopresence.kamailiopresence_properties_changed.!restart_kamailiopresence::
      "kamailiopresence_properties_changed" usebundle => refresh_sip_service("SIPX_PRESENCE_LOG_LEVEL : (DEBUG|INFO|NOTICE|WARNING|ERR|ERROR|CRIT|ALERT|EMERG)",
                           "$(sipx.SIPX_CONFDIR)/sipXpresence-config",
                           "$(sipx.SIPX_CONFDIR)/sipXpresence-config.cf-before-edit",
                           "kamailiopresence");

  commands:
    !kamailiopresence.kamailiopresence_running::
      "$(daemon)"
        comment => "stop kamailio presence",
        args => "stop";

    kamailiopresence.!kamailiopresence_running::
      "$(daemon)"
        comment => "start kamailio presence",
        args => "start";

    kamailiopresence.kamailiopresence_running.(restart_kamailiopresence|refresh_kamailiopresence|restart_mysql|mysql_change_password)::
      "$(daemon)"
        comment => "restart kamailio presence",
        args => "restart";
}
