# Copyright (c) 2012 eZuce, Inc. All rights reserved.
# Contributed to SIPfoundry under a Contributor Agreement

# This software is free software; you can redistribute it and/or modify it under
# the terms of the Affero General Public License (AGPL) as published by the
# Free Software Foundation; either version 3 of the License, or (at your option)
# any later version.

# This software is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more
# details.

#
# sipxconfig configuration and process management
#
bundle agent sipxconfig {
  methods:
    primary::
      "any" usebundle => "sipxconfig_running";
      "any" usebundle => "system_audit_cleanup";
    primary.apache::
      "any" usebundle => "sipxconfig_apache";
    sipxlogwatcher::
      "any" usebundle => "sipxconfig_logwatcher";
    any::
      "any" usebundle => "sipxconfig_services";
}

bundle agent sipxconfig_logwatcher {
  files:
    "$(sipx.SIPX_CONFDIR)/sipxlogwatcher.d/sipxconfig.sec"
      comment => "sipxconfig log watcher",
      create => "true",
      perms => m(644),
      transformer => "$(sipx.SIPX_LIBEXECDIR)/sipxlogwatcher-maker --in $(sipx.SIPX_CFDATA)/$(sipx.location_id)/alarms.yaml --template $(sipx.SIPX_CONFDIR)/sipxconfig/sipxconfig.sec.erb --out $(this.promiser)",
      classes => if_repaired("reload_sipxlogwatcher");
      
}

bundle agent sipxconfig_running {
  vars:
    any::
      "service_command" string => ".*\s-Dprocname=sipxconfig\s.*";

  methods:
    any::
      "any" usebundle => find_sipxservice_by_command_regex("$(service_command)","sipxconfig_running");
    !src.primary::
      "any" usebundle => rh_chkconfig_status("sipxconfig off");
    !src.!primary::
      "any" usebundle => rh_chkconfig_status("sipxconfig off");

  commands:
    primary.!sipxconfig_running.!stop_sipxecs::
      "$(sipx.SIPX_SERVICEDIR)/sipxconfig"
        comment => "start sipxconfig",
        args => "start";

    primary.sipxconfig_running.(restart_sipxconfig|restart_sipxecs|java_authorities_repaired)::
      "$(sipx.SIPX_SERVICEDIR)/sipxconfig"
        comment => "restart sipxconfig",
        args => "asyncrestart";

    (!primary|stop_sipxecs).sipxconfig_running::
      "$(sipx.SIPX_SERVICEDIR)/sipxconfig"
        comment => "stop sipxconfig",
        args => "stop";
        
  files:
    "$(sipx.SIPX_CONFDIR)/log4j.properties"
      comment => "configure log4j $(this.promiser)",
      create => "true",
      perms => m("644"),
      edit_line => sipx_log4j_properties_contents;
}

bundle agent sipxconfig_apache {
  files:
    "$(sipx.APACHE2_CONFDIR)/sipxconfig.conf"
      create => "true",
      comment => "apache config for admin ui and service phone profiles",
      edit_defaults => empty,
      edit_line => expand_template("$(sipx.SIPX_CONFDIR)/sipxconfig/sipxconfig-apache.conf"),
      classes => if_repaired("restart_apache");
}

bundle agent sipxconfig_services {
  files:
    "$(sipx.SIPX_CONFDIR)/sipxecs-services.ini"
      comment => "list of sipxecs services",
      create => "true",
      perms => m("644"),
      copy_from => copy_from_cfdata("$(sipx.location_id)/sipxecs-services.ini");
}

bundle edit_line sipx_log4j_properties_contents {
  insert_lines:
    any::
      "$(sipx.SIPX_CFDATA)/$(sipx.location_id)/log4j.properties.part"
        insert_type => "file";
      "log4j.appender.file=org.sipfoundry.commons.log4j.SipFoundryAppender";
	  "log4j.appender.file.File=${jetty.log.dir}/sipxconfig.log";
	  "log4j.appender.file.layout=org.sipfoundry.commons.log4j.SipFoundryLayout";
	  "log4j.additivity.org.apache.cxf.interceptor=true";
	  "# legal values (highest to lowest): debug info warn error fatal";
	  "log4j.rootLogger=warn, file";
	  "# For logging login attempts...";
	  "log4j.logger.login=info,userlogin";
	  "log4j.additivity.login=false";
	  "log4j.appender.userlogin=org.sipfoundry.commons.log4j.SipFoundryAppender";
	  "log4j.appender.userlogin.File=${jetty.log.dir}/sipxconfig-logins.log";
	  "log4j.appender.userlogin.layout=org.apache.log4j.PatternLayout";
	  "log4j.appender.userlogin.layout.ConversionPattern=\"%d\":%5p:%c{1}:%L:%m%n";
	  "# LDAP log";
	  "log4j.logger.ldap_logger=debug,ldap";
	  "log4j.additivity.ldap_logger=false";
	  "log4j.appender.ldap=org.sipfoundry.commons.log4j.SipFoundryAppender";
	  "log4j.appender.ldap.File=${jetty.log.dir}/sipxconfig-ldap.log";
	  "log4j.appender.ldap.layout=org.apache.log4j.PatternLayout";
	  "log4j.appender.ldap.layout.ConversionPattern=\"%d\":%5p:%c{1}:%L:%m%n";	  
	  "# Audit log";
	  "log4j.appender.auditlog=org.sipfoundry.commons.log4j.SipFoundryAppender";
	  "log4j.appender.auditlog.File=${jetty.log.dir}/sipxconfig-audit.log";
	  "log4j.appender.auditlog.layout=org.sipfoundry.commons.log4j.SipFoundryLayout";
	  "log4j.appender.auditlog.layout.ConversionPattern=\"%d\":%X{username}:%X{eventType}:\"%m\"%n";
   	  "log4j.logger.org.sipfoundry.sipxconfig.auditlog=info, auditlog";
	  "log4j.category.javax.sip=warn";
  delete_lines:
    any::
      ".*";
}

# Install system_audit cleanup
bundle agent system_audit_cleanup {
  vars:
	# execute it every day after midnight
	"cron" string => "20 0 * * * $(sipx.SIPX_BINDIR)/system-audit-cleanup &>> $(sipx.SIPX_LOGDIR)/system-audit-cleanup.log";
	"cron_id" string => ".*/system-audit-cleanup .*"; #regex

  methods:
	primary::
	  "any" usebundle => add_crontab("$(cron_id)", "$(sipx.SIPXPBXUSER)", "$(cron)");

	!primary::
	  "any" usebundle => remove_crontab("$(cron_id)", "$(sipx.SIPXPBXUSER)");
}
