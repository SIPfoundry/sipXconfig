<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<!--   Generated by sipXecs: http://www.sipfoundry.org/

   Instructions for integrating new configuration file content into sipXconfig:
     http://wiki.sipfoundry.org/display/xecsdev/Adding+Polycom+SoundPoint+IP+New+Configuration+File+Content+into+sipXconfig
-->
#macro (computeCodecSettings $setting $prefix)

   #set ($selected_codecs = $setting.getTypedValue())
   #set ($codec_options = $setting.getType().getEnums().keySet())

   ## Loop through each supported codec.
   #foreach ($codec_option in $codec_options)

      ## Determine the selected preference value of this codec.  (Blank if not selected.)
      #if (${selected_codecs.contains(${codec_option})})
         #set ($codec_value = $math.add($selected_codecs.indexOf($codec_option), "1"))
      #else
         #set ($codec_value = "")
      #end

      ## Generate the codec preference value.
      ${prefix}.${codec_option}="${codec_value}"
   #end
#end
<polycomConfig xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="polycomConfig.xsd">
  <dialplan
#set ($group = $cfg.EndpointSettings.getSetting('dialplan'))
#foreach ($setting in $cfg.getSettings($group))
    dialplan.${setting.ProfileName}="$!{setting.Value}"
#end

##LINES DIALPLAN
#foreach ($line in $lines)
#set ($i = $velocityCount)
#set ($group = $line.getSetting('line-dialplan'))
#foreach ($setting in $cfg.getSettings($group))
    dialplan.${i}.${setting.ProfileName}="$!{setting.Value}"
#end
    dialplan.${i}.applyToUserSend="1"
    dialplan.${i}.applyToUserDial="1"
    dialplan.${i}.applyToCallListDial="0"
    dialplan.${i}.applyToDirectoryDial="0"
#end

#foreach ($line in $lines)
#set ($i = $velocityCount)
#set ($group = $line.getSetting('line-dialplan').getSetting('digitmap'))
#foreach ($setting in $cfg.getSettings($group))
      dialplan.${i}.${setting.ProfileName}="$!{setting.Value}"
#end
#end
#foreach ($line in $lines)
#set ($i = $velocityCount)
#set ($group = $line.getSetting('line-dialplan').getSetting('digitmap').getSetting("routing.1"))
        dialplan.${i}.routing.server.1.address="$!{group.getSetting('address').Value}"
        dialplan.${i}.routing.server.1.port="$!{group.getSetting('port').Value}"
#end
#foreach ($line in $lines)
#set ($i = $velocityCount)
#foreach ($emergencyVal in $cfg.getLineEmergencySetting($line))
#set ($j = $velocityCount)
        dialplan.${i}.routing.emergency.${j}.value="$!{emergencyVal}"
        dialplan.${i}.routing.emergency.${j}.server.1="1"
#end
#end
  >
     <dialplan.digitmap
#set ($group = $cfg.EndpointSettings.getSetting('dialplan').getSetting('digitmap'))
#foreach ($setting in $cfg.getSettings($group))
      dialplan.${setting.ProfileName}="$!{setting.Value}"
#end
    />
    <dialplan.routing>
      <dialplan.routing.server
#set ($group = $cfg.EndpointSettings.getSetting('dialplan').getSetting('digitmap').getSetting('routing.1'))
        dialplan.routing.server.1.address="$!{group.getSetting('address').Value}"
        dialplan.routing.server.1.port="$!{group.getSetting('port').Value}"
      />
      <dialplan.routing.emergency
#set ($group = $cfg.EndpointSettings.getSetting('dialplan').getSetting('digitmap').getSetting('routing.1'))
#set ($index = 1)
#foreach ($emergencyVal in $cfg.EmergencySetting)
        dialplan.routing.emergency.${index}.value="$!{emergencyVal}"
#set ($index = $index+1)
#end
      />
    </dialplan.routing>
  </dialplan>
  <lcl>
#set ($setting = $cfg.EndpointSettings.getSetting('localization/language'))
      <lcl.ml lcl.ml.lang="$!{setting.Value}">
      </lcl.ml>
    <lcl.datetime>
      <lcl.datetime.time
#set ($group = $cfg.EndpointSettings.getSetting('lcl').getSetting('time'))
#foreach ($setting in $cfg.getSettings($group))
        lcl.datetime.time.${setting.ProfileName}="$!{setting.Value}"
#end
      />
      <lcl.datetime.date
#set ($group = $cfg.EndpointSettings.getSetting('lcl').getSetting('datetime'))
#foreach ($setting in $cfg.getSettings($group))
        lcl.datetime.${setting.ProfileName}="$!{setting.Value}"
#end
      />
    </lcl.datetime>
  </lcl>
  <se
#set ($group = $cfg.EndpointSettings.getSetting('se'))
#foreach ($setting in $cfg.getSettings($group))
    se.${setting.ProfileName}="$!{setting.Value}"
#end
  />

  <voice
#set ($group = $cfg.EndpointSettings.getSetting('voice'))
#foreach ($setting in $cfg.getSettings($group))
    voice.${setting.ProfileName}="$!{setting.Value}"
#end
#set($voice_audioProfile_G7221_24kbps_payloadType = "127")
      voice.audioProfile.G7221.24kbps.payloadType="$!{voice_audioProfile_G7221_24kbps_payloadType}"
#set ($group = $cfg.EndpointSettings.getSetting('voice').getSetting('audioProfile'))
#foreach ($subgroup in $group.Values)
#set ($parentProfileName = $subgroup.ProfileName)
#foreach ($setting in $subgroup.Values)
        voice.audioProfile.${parentProfileName}.${setting.ProfileName}="$!{setting.Value}"
#end
#end
  >
      <voice.codecPref
#set ($group = $cfg.EndpointSettings.getSetting('voice').getSetting('codecPref'))
## This is a loop, but there will only ever be one codec group per Polycom model.
#foreach ($setting in $cfg.getSettings($group))
      #set ($prefix = "voice.codecPref")
   #computeCodecSettings($setting $prefix)
#end
      />
    <voice.volume>
      <voice.volume.persist
#set ($group = $cfg.EndpointSettings.getSetting('voice').getSetting('volume'))
#foreach ($setting in $cfg.getSettings($group))
      voice.volume.${setting.ProfileName}="$!{setting.Value}"
#end
    />
    </voice.volume>
    <voice.vad
#set ($group = $cfg.EndpointSettings.getSetting('voice').getSetting('vad'))
#foreach ($setting in $cfg.getSettings($group))
      voice.${setting.ProfileName}="$!{setting.Value}"
#end
    />
  </voice>
  <qos>
    <qos.ethernet>
#set ($group = $cfg.EndpointSettings.getSetting('qos').getSetting('ethernet').getSetting('rtp'))
      <qos.ethernet.rtp
#foreach ($setting in $cfg.getSettings($group))
      qos.ethernet.rtp.${setting.ProfileName}="$!{setting.Value}"
#end
      >
#if ($phone.model.isSupported("video"))
      <qos.ethernet.rtp.video
#set ($setting = $cfg.EndpointSettings.getSetting('qos').getSetting('ethernet').getSetting('rtp').getSetting('video'))
   #foreach ($setting in $cfg.getSettings($group))
       qos.ethernet.rtp.video.${setting.ProfileName}="$!{setting.Value}"
   #end
   />
#end
		
      </qos.ethernet.rtp>
#set ($group = $cfg.EndpointSettings.getSetting('qos').getSetting('ethernet').getSetting('callControl'))
      <qos.ethernet.callControl
#foreach ($setting in $cfg.getSettings($group))
      qos.ethernet.callControl.${setting.ProfileName}="$!{setting.Value}"
#end
      />
#set ($group = $cfg.EndpointSettings.getSetting('qos').getSetting('ethernet').getSetting('other'))
      <qos.ethernet.other
#foreach ($setting in $cfg.getSettings($group))
      qos.ethernet.${setting.ProfileName}="$!{setting.Value}"
#end
      />
    </qos.ethernet>
    <qos.ip>
      <qos.ip.rtp
#set ($group = $cfg.EndpointSettings.getSetting('qos').getSetting('ip.rtp'))
#foreach ($setting in $cfg.getSettings($group))
        qos.ip.rtp.${setting.ProfileName}="$!{setting.Value}"
#end
      >
#if ($phone.model.isSupported("video"))
        <qos.ip.rtp.video
#set ($group = $cfg.EndpointSettings.getSetting('qos').getSetting('ip.rtp').getSetting('video'))
#foreach ($setting in $cfg.getSettings($group))
        qos.ip.rtp.video.${setting.ProfileName}="$!{setting.Value}"
#end
        />
#end
      </qos.ip.rtp>
      <qos.ip.callControl
#set ($group = $cfg.EndpointSettings.getSetting('qos').getSetting('ip.callControl'))
#foreach ($setting in $cfg.getSettings($group))
        qos.ip.callControl.${setting.ProfileName}="$!{setting.Value}"
#end
      />
    </qos.ip>
  </qos>

  <tcpIpApp>
    <tcpIpApp.sntp
#set ($group = $cfg.EndpointSettings.getSetting('tcpIpApp.sntp'))
#foreach ($setting in $cfg.getSettings($group))
      tcpIpApp.sntp.${setting.ProfileName}="$!{setting.Value}"
#end
    />
    <tcpIpApp.port>
      <tcpIpApp.port.rtp
#set ($group = $cfg.EndpointSettings.getSetting('tcpIpApp.port.rtp'))
#foreach ($setting in $cfg.getSettings($group))
        tcpIpApp.port.rtp.${setting.ProfileName}="$!{setting.Value}"
#end
      />
    </tcpIpApp.port>
    <tcpIpApp.keepalive>
     <tcpIpApp.keepalive.tcp
#set ($group = $cfg.EndpointSettings.getSetting('tcpIpApp.keepalive.tcp'))
#foreach ($setting in $cfg.getSettings($group))
      tcpIpApp.keepalive.tcp.${setting.ProfileName}="$!{setting.Value}"
#end
    />
  </tcpIpApp.keepalive>
  </tcpIpApp>

  <httpd
#set ($group = $cfg.EndpointSettings.getSetting('httpd'))
#foreach ($setting in $cfg.getSettings($group))
    httpd.${setting.ProfileName}="$!{setting.Value}"
#end
  >
    <httpd.cfg
#set ($group = $cfg.EndpointSettings.getSetting('httpd').getSetting('cfg'))
#foreach ($setting in $cfg.getSettings($group))
      httpd.cfg.${setting.ProfileName}="$!{setting.Value}"
#end
    />
  </httpd>
  <key
#set ($group = $cfg.EndpointSettings.getSetting('key'))
#foreach ($setting in $cfg.getSettings($group))
    key.${setting.ProfileName}="$!{setting.Value}"
#end
  />
  <log>
    <log.level>
      <log.level.change
#set ($group = $cfg.EndpointSettings.getSetting('log').getSetting('level.change'))
#foreach($levelSetting in $group.Values)
        log.level.change.${levelSetting.Name}="${levelSetting.Value}"
#end
      />
    </log.level>
    <log.render
#set ($group = $cfg.EndpointSettings.getSetting('log').getSetting('render'))
#foreach ($setting in $cfg.getSettings($group))
      log.render.${setting.ProfileName}="$!{setting.Value}"
#end
    />
  </log>

  <sec
#set ($group = $cfg.EndpointSettings.getSetting('sec'))
#foreach ($setting in $cfg.getSettings($group))
    sec.${setting.ProfileName}="$!{setting.Value}"
#end
  >
    <sec.pwd>
      <sec.pwd.length
#set ($group = $cfg.EndpointSettings.getSetting('sec').getSetting('pwd.length'))
#foreach ($setting in $cfg.getSettings($group))
        sec.pwd.length.${setting.ProfileName}="$!{setting.Value}"
#end
      />
    </sec.pwd>
</sec>
#if ($phone.model.isSupported("video"))
  <powerSaving
#set ($group = $cfg.EndpointSettings.getSetting('powerSaving'))
#foreach ($setting in $cfg.getSettings($group))
      powerSaving.${setting.ProfileName}="$!{setting.Value}"
#end
  >
     <powerSaving.officeHours>
#set ($group = $cfg.EndpointSettings.getSetting('powerSaving').getSetting('officeHours').getSetting('startHour'))
       <powerSaving.officeHours.startHour
#foreach ($setting in $cfg.getSettings($group))
      powerSaving.officeHours.${setting.ProfileName}="$!{setting.Value}"
#end
       />
#set ($group = $cfg.EndpointSettings.getSetting('powerSaving').getSetting('officeHours').getSetting('duration'))
       <powerSaving.officeHours.duration
#foreach ($setting in $cfg.getSettings($group))
      powerSaving.officeHours.${setting.ProfileName}="$!{setting.Value}"
#end
       />
     </powerSaving.officeHours>
     <powerSaving.idleTimeout
#set ($group = $cfg.EndpointSettings.getSetting('powerSaving').getSetting('idleTimeout'))
#foreach ($setting in $cfg.getSettings($group))
      powerSaving.idleTimeout.${setting.ProfileName}="$!{setting.Value}"
#end
     />
    <powerSaving.userDetectionSensitivity
#set ($group = $cfg.EndpointSettings.getSetting('powerSaving').getSetting('userDetectionSensitivity'))
#foreach ($setting in $cfg.getSettings($group))
      powerSaving.userDetectionSensitivity.${setting.ProfileName}="$!{setting.Value}"
#end
     />
  </powerSaving>
#end

  <divert
#set($start = 1)
#set($end = $lines)
#foreach($i in [$start..$end])
    divert.fwd.${i}.enabled="0"
#end
  />
  

<device device.set="1"
#set ($group = $cfg.EndpointSettings.getSetting('log').getSetting('device.syslog'))
#foreach ($setting in $cfg.getSettings($group))
    device.syslog.${setting.ProfileName}="$!{setting.Value}"
#end

#set ($group = $cfg.EndpointSettings.getSetting('network').getSetting('device.net'))
#if ($cfg.EndpointSettings.getSetting('network').getSetting('device.net').getSetting('overwrite').Value != 0)
#foreach ($setting in $cfg.getSettings($group))
#if (${setting.ProfileName} != '$ignore$')
    device.net.${setting.ProfileName}="$!{setting.Value}"
#end
#end 
#end
device.sec.TLS.customCaCert1.set="1"
device.sec.TLS.customCaCert1="$cert"
/>

<sec
sec.TLS.customCaCert.1="$cert"
sec.TLS.profile.1.deviceCert="Application1"
sec.TLS.profileSelection.SIP="ApplicationProfile1"
sec.TLS.profile.1.caCert.application2="0"
sec.TLS.profile.1.caCert.application3="0"
sec.TLS.profile.1.caCert.application4="0"
sec.TLS.profile.1.caCert.application5="0"
sec.TLS.profile.1.caCert.application6="0"
sec.TLS.profile.1.caCert.defaultList="0"
sec.TLS.profile.1.caCert.platform1="0"
sec.TLS.profile.1.caCert.platform2="0"
/>

<ptt
#set ($ptt = $cfg.EndpointSettings.getSetting('ptt'))
#foreach ($setting in $cfg.getRecursiveSettings($ptt))
          ptt.${setting.ProfileName}="$!{setting.Value}"
#end
/>
<prov
#set ($prov = $cfg.EndpointSettings.getSetting('prov'))
#foreach ($setting in $cfg.getRecursiveSettings($prov))
          prov.${setting.ProfileName}="$!{setting.Value}"
#end
/>
#if ($phone.getDeviceVersion() == $ver5 || $phone.getDeviceVersion() == $ver501 || $phone.getDeviceVersion() == $ver502)
<keyboard
#set ($keyboard = $cfg.EndpointSettings.getSetting('keyboard'))
#foreach ($setting in $cfg.getRecursiveSettings($keyboard))
          keyboard.${setting.ProfileName}="$!{setting.Value}"
#end
/>
<mwi
#set ($mwi = $cfg.EndpointSettings.getSetting('mwi'))
#foreach ($setting in $cfg.getRecursiveSettings($mwi))
          mwi.${setting.ProfileName}="$!{setting.Value}"
#end
/>
<audioVideoToggle
#set ($audioVideoToggle = $cfg.EndpointSettings.getSetting('audioVideoToggle'))
#foreach ($setting in $cfg.getRecursiveSettings($mwi))
          audioVideoToggle.${setting.ProfileName}="$!{setting.Value}"
#end
/>
#end
#if ($phone.getDeviceVersion() == $ver502 || $phone.getDeviceVersion() == $ver416)
<Diags
#set ($diags = $cfg.EndpointSettings.getSetting('Diags'))
#foreach ($setting in $cfg.getRecursiveSettings($diags))
          Diags.${setting.ProfileName}="$!{setting.Value}"
#end
/>
<prov
#set ($provautoConfigUpload = $cfg.EndpointSettings.getSetting('prov.autoConfigUpload'))
#foreach ($setting in $cfg.getRecursiveSettings($provautoConfigUpload))
          prov.autoConfigUpload.${setting.ProfileName}="$!{setting.Value}"
#end
/>
#end
</polycomConfig>