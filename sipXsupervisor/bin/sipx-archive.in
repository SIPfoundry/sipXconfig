#!/bin/env ruby

# Copyright (c) 2012 eZuce, Inc. All rights reserved.
# Contributed to SIPfoundry under a Contributor Agreement
#
# This software is free software; you can redistribute it and/or modify it under
# the terms of the Affero General Public License (AGPL) as published by the
# Free Software Foundation; either version 3 of the License, or (at your option)
# any later version.
#
# This software is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more
# details.


# Archive and Restore commands

require 'yaml'
require 'fileutils'
require 'uri'
require 'net/ftp'
require 'rubygems'
require 'net/sftp'

# Common code for backup and restore operations
class ArchiveBase
  attr_writer :verbose
  attr_writer :out

  def initialize(config)
    @bin_dir = '@SIPX_BINDIR@'
    @backup_dir = '@SIPX_VARDIR@/backup'
    @backup_tmp_dir = '@SIPX_TMPDIR@/backup'
    @restore_dir = '@SIPX_TMPDIR@/restore'
    @data = YAML::load_file(config)
    @out = $stdout
  end

  def cmd(cmd)
    puts cmd if @verbose
    system(cmd)
  end

  def fresh_dir(dir)
    # programming safeguard : ensure we do not delete '/'
    raise "Internal error" if dir.strip.empty?
    FileUtils.rm_rf dir 
    FileUtils.mkdir_p dir
  end

  def file_manager(params)
    settings = @data['settings'][params[:mode]]
    if !settings.nil? && settings.has_key?('ftp')
      remote = nil
      params = settings['ftp']
      uri = URI.parse(params['url'])
      remote = FtpFileManager.new("#{@backup_dir}/#{@data['plan']}")
      remote.connect(uri, params)
      return remote
    end
    LocalFileManager.new("#{@backup_dir}/#{@data['plan']}")
  end
end

# Orchestrate backing up of cluster including uploading if ftp is configured and purging old backups
class Backup < ArchiveBase  
  def run(params, args)
    defines = define_param(params)
    cmd(@bin_dir + "/sipxagent -h #{hosts_param} -b backup #{defines}")
    cmd(@bin_dir + "/sipxagent -b backup_collect #{defines}")
    fs = file_manager(params)
    fs.save(@data['max'])
  end

  def hosts_param
    @data['hosts'].values.join(' -h ')
  end

  def define_param(params)
    "-d #{@data['plan']}_archive -d #{params[:mode]}_archive"
  end
end

# Orchestrate restore a cluster including staging file from local or ftp plan.
class Restore < Backup
  def run(params, args)
    mgr = file_manager(params)
    # nothing specified, assume files are already staged.
    unless args.empty?
      fresh_dir @restore_dir
      args.each {|path|
        dir, fname = path.split('/')
        mgr.stage(dir, fname, @restore_dir)
      }
    end
    correlate_by_location
    defines = define_param(params)
    cmd(@bin_dir + "/sipxagent -h #{hosts_param} -b restore #{defines}")
  end

  # organize files by which location has capability to restore them
  def correlate_by_location
    @data['correlate_restore'].each_pair {|locationId, defIds|      
      fresh_dir "#{@restore_dir}/#{locationId}"
      defIds.each {|defId|
        if File.exists?("#{@restore_dir}/#{defId}")          
          FileUtils.mv("#{@restore_dir}/#{defId}", "#{@restore_dir}/#{locationId}/#{defId}")
        end
      }
    }
  end
end

# List current backups in chronological order based on directory name following
# YearMonthDayHourMin pattern not based on file timestamp
class ListBackups < ArchiveBase
  def run(params, args)
    mgr = file_manager(params)
    mgr.list.each {|backup|
      items = mgr.list_items(backup)
      @out.puts "#{backup} #{items.join(' ')}"
    }
  end 
end

# List current backups to STDOUT in chronological order based on directory name following 
# YearMonthDayHourMin pattern not based on file timestamp
class LinkBackups < ArchiveBase
  def run(params, args)
    @out.puts file_manager(params).link
  end
end

# Common code for managing backup lists
class FileManagerBase

  def initialize(backup_dir)
    @backup_dir = backup_dir
  end

  def select_backups(list)
    filtered = list.select { |f|
      # ignore dirs that don't appear to be backups
      f =~ /^\d{12}$/
    }
    filtered.sort!.reverse!
  end

  # Call given block on oldest backups that exceed max backup count
  def purgable(max)
    all = list.reverse
    if all.length > max
      for i in 0..((all.length - max) - 1)
        yield all[i]
      end
    end
  end
end

# Listing, uploading and purging backups on FTP server
class FtpFileManager < FileManagerBase

  def initialize(backup_dir)
    @backup_dir = backup_dir
  end

  def connect(uri, params)
    @uri = uri
    @ftp = Net::SFTP.start(uri.host, params['user'], :password => params['password'])
    @path = sanitize_path(uri.path)
  end

  def save(max)
    # handy - reuse local backup file handler to manage temp ftp directory
    local = LocalFileManager.new(@backup_dir)

    upload(local.list.last)

    purgable(max) { |b|
      purge(b)
    }

    local.save(0)
  end

  def sanitize_path(path)
    path.gsub(%r[^/],'').gsub(%r[/$],'')
  end

  def purge(b)
    @ftp.dir.glob("#{@path}/#{b}", "*") {|entry|
      @ftp.remove! "#{@path}/#{b}/#{entry.name}"
    }
    @ftp.rmdir!("#{@path}/#{b}")
  end

  def upload(b)
    begin
      @ftp.mkdir!("#{@path}/#{b}")
    rescue Net::SFTP::StatusException
      # failed? then must already exist, i couldn't find a better way to test
      # directory existance in SFTP's API --Douglas
    end
    Dir["#{@backup_dir}/#{b}/*"].each {|f|
      @ftp.upload!(f, "#{@path}/#{b}/#{File.basename(f)}")
    }
  end

  def list
    candidates = @ftp.dir.glob(@path, '*').collect { |f| f.name }
    select_backups(candidates)
  end

  def list_items(b)
    @ftp.dir.glob("#{@path}/#{b}", '*').collect { |f| f.name }
  end

  def link
    @uri.to_s
  end

  def stage(dir, file, dst)
    @ftp.download("#{@path}/#{dir}/#{file}", "#{dst}/#{file}")
  end
end

# Listing and purging backups on FTP server
class LocalFileManager < FileManagerBase

  def initialize(backup_dir)
    @backup_dir = backup_dir
  end

  def save(max)
    purgable(max) { |b|
      FileUtils.rm_r("#{@backup_dir}/#{b}")
    }
  end

  def list
    return [] unless File.exists? @backup_dir
    Dir.chdir(@backup_dir) {
      select_backups(Dir["*"])
    }
  end

  def list_items(b)
    Dir.chdir("#{@backup_dir}/#{b}") {
      return Dir["*"]
    }
  end

  def link
    "/sipxconfig/backup"
  end

  def stage(dir, file, dst)
    FileUtils.cp("#{@backup_dir}/#{dir}/#{file}", "#{dst}/#{file}")
  end
end

class CfengineBase < ArchiveBase
  attr_writer :verbose

  def initialize(config)
    super(config)
  end

end

class CfengineBackup < CfengineBase
  def run(params, args)
    fresh_dir @backup_tmp_dir
    if @data.has_key?('backup') and @data.has_key?('selected_backups')
      if @data['select_backups'].has_key?(params[:mode])
        @data['selected_backups'][params[:mode]].each {|defId|
          if @data['backup'].has_key?(defId)
            template = @data['backup'][defId]
            file = "#{@backup_tmp_dir}/#{defId}"
            line = template % file
            cmd(line) or
             raise "Failed to backup #{defId} using command #{line}"
          end
        }
      end
    end
  end
end

class CfengineRestore < CfengineBase
  def run(params, args)
    if @data.has_key?('restore')
      @data['restore'].each_pair { |defId,template|
        file = "#{@restore_dir}/#{params[:location_id]}/#{defId}"
        if File.exists?(file)
          line = template % file
          cmd(line) or
            raise "Failed to restore #{defId} using command #{line}"
        end
      }
    end
  end
end

if __FILE__ == $0

require 'optparse'
params = {}
params[:mode] = 'auto'
operation = nil

verbose = false
args = OptionParser.new { |opts|
  opts.banner = <<EOF
Create or restore backups and archives.
EOF

  opts.on("--backup config.yaml",
      "Restore the specified Configuration archive."){ |v|
    operation = Backup.new(v)
  }

  opts.on("--restore config.yaml",
      "Restore the specified Configuration archive."){ |v|
    operation = Restore.new(v)
    # because there there is no auto restore
    params[:mode] = 'manual'
  }

  opts.on("--list config.yaml", "List the current backups."){ |v|
    operation = ListBackups.new(v)
  }

  opts.on("--link config.yaml", "Return link to backup storages."){ |v|
    operation = LinkBackups.new(v)
  }

  opts.on("--backup-called-by-cfengine config.yaml",
      "Only to be called by CFEngine script."){ |v|
    operation = CfengineBackup.new(v)
  }

  opts.on("--mode [manual|auto]",
      "Manual mode called by user interface when selected specfic files to backup. Default is auto."){|v|
    params[:mode] = v
  }

  opts.on("--restore-called-by-cfengine config.yaml",
      "Only to be called by CFEngine script."){ |v|
    operation = CfengineRestore.new(v)
  }

  opts.on("--restore-called-by-cfengine-location-id location_id",
      "Only to be called by CFEngine script."){ |v|
    params[:location_id] = v
  }

  $output = $stdout
  opts.on("--out file", "Send data to stdout"){ |v|
    $output = File.open(v, "w")
  }

  opts.on("--verbose",
      "Restore the specified Configuration archive."){
    verbose = true
  }
}
args.parse!

if operation.nil?
  raise "Must specify either restore or archive options."
end

operation.verbose = verbose
operation.out = $output
operation.run(params, ARGV)
exit 0

end

