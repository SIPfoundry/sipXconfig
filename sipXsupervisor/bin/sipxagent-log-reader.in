#!/usr/bin/ruby

# Parse cfengine output and interpret results. Parse for potential erros
# and ignore common ones.

require 'optparse'

$verbose = false

def token(token, match, block)
  found = !match.nil? && match.size >= 2
  puts "Token - #{token}:#{match[1]}" if ($verbose && found)
  block.call(token, match[1]) if found
end

def parse(input, &block)
  while line = input.gets
    token(:handle, /\s+Promise handle:\s+(.*)/.match(line).to_a, block)
    token(:comment, /\s+Comment:\s+(.*)$/.match(line).to_a, block)
    token(:info, /\s+\*\* Information:\s+(.*)/.match(line).to_a, block)
    token(:warning, /\s+!!\s+(.*)/.match(line).to_a, block)
    token(:error, /\s+!!!\s+(.*)/.match(line).to_a, block)
  end
  block.call(:finished, nil)
end

def digest(input)
  err = false
  warn = false
  msg = ''
  handle = ''
  parse(input) {|tok, value|
    puts "Digester - #{tok}:#{value}" if $verbose
    case tok
    when :info
      msg << '. ' << value
    when :warning
      warn = true
      msg << '. ' << value
    when :comment
     msg << ' attempting \'' << value  << '\''
    when :error
      err = true
      msg << '. ' << value
    when :handle, :finished
      # clear any outstanding errors/warning
      if err
        msg = (handle.empty? ? "Error" : "Error in #{handle}") << msg
        yield :error, msg
      elsif warn
        msg = (handle.empty? ? "Warning" : "Warning in #{handle}") << msg
        yield :warning, msg
      end
      err = warn = false
      msg = ''
      handle = value
    else
      raise "script error: unrecognized #{tok} #{value}"
    end
  }
end

def analyze(input)
  benign = [

    # java creates really long process lines and cfengine is warning
    # it couldn't read it all. that's why we put process identifier in first parth
    /Unacceptable model uncertainty examining processes/,

    # We reverse expected process count to detect running process
    /Process count for '.*' was out of promised range/,

    # Part of process detection
    /Matched:/,

    # just detection cfengine needs to pull a file from master
    /Image file .* has a wrong digest\/checksum/
  ]

  ok = true
  digest(input) { |level, msg|
    puts "Analyzer - #{level} #{msg}" if $verbose
    next if benign.find {|ignore|
      ignore.match(msg)
    }
    $stderr.puts(msg) if (level == :error || (level == :warning && $verbose))
    ok = false if (level == :error)
  }

  return ok
end

args = OptionParser.new { |opts|
  opts.banner = "Usage : sipxagent-log-parser [options] < cfengine-log-file"

  opts.separator ""
  opts.separator "Options:"

  opts.on("--verbose", "Send extra details to console.") {
    $verbose = true
  }

  opts.on_tail("--help", "Print options") {
    puts opts
    exit
  }
}

args.parse!

status = analyze($stdin)
exit status
