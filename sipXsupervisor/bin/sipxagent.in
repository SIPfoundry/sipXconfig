#!/usr/bin/ruby

require 'optparse'

# automake substitution vars
$user = '@SIPXPBXUSER@'
$bindir = '@SIPX_BINDIR@'
$cfinputs = '@SIPX_CFINPUTS@'
$logfile = '@SIPX_LOGDIR@/sipxagent.log'

# global vars
$args = Array.new(ARGV)

def cmd(verbose, cmd)
  puts cmd if verbose
  return system(cmd)
end

def run(verbose, is_remote, hosts, defines, bundles)
  
  if (Process.uid == 0 && is_remote) # uid == 0 for root?
    #
    # You should not run cf-runagent as root because root user does not have all
    # the ssl keys setup. Only sipx user should. So if you are attemptng to run
    # cf-agent remote as root, no problem, we'll switch you over automatically
    # we need to go thru su so environment is setup properly
    #

    # !RECURSIVE
    # Too many commands needs to run as proper user to try and run "su" on them all 
    # so just call this script again as the proper user
    ok = cmd(verbose, "su - #{$user} sh -c \"#{$bindir}/sipxagent #{$args.join(' ')}\"")

  else
    dstr = (defines.empty? ? '' : "-d " + defines.join(' -d '))
    bstr = (bundles.empty? ? '' : "-b " + bundles.join(' -b '))
    hstr = (hosts.empty? ? '' : "-H " + hosts.join(' -H '))
    vstr = (verbose ? '-v' : '')
    if (is_remote || Process.uid != 0)
      ok = cmd(verbose, "cf-runagent #{vstr} #{hstr} -f #{$cfinputs}/sipxagent.cf -o \"#{vstr} #{dstr} #{bstr} -K\" | tee -a #{$logfile}")
    else 
      # Short-cut - If you're root and you're not remote, do not bother going thru 
      # sipxsupervisor.  This is handy if supervisor is dead or in the very initial
      # call to sipxecs-setup on primary when nothing is running yet
      ok = cmd(verbose, "cf-agent #{vstr} #{dstr} #{bstr} -IKf #{$cfinputs}/promises.cf");
    end
  end
  exit(ok ? 0 : 1)
end  


verbose = true
hosts = [ '127.0.0.1' ]
defines = []
bundles = []
# assume this is a local run
is_remote = false

args = OptionParser.new { |opts|
  opts.banner = "Usage : sipxagent [options]"

  opts.separator ""
  opts.separator "Options:"

  opts.on("--verbose", "Send extra details to console.") {
    verbose = true
  }

  opts.on_tail("-h host", "--host host", <<EOF
Execute this on remote host(s) or even on local host but 
as non-root user. Requires that sipxsupervisor is running on host and allows connections 
from this machines.

EOF
               ) {|v|
    hosts << v
    is_remote = true
  }

  opts.on_tail("-d class", "--define class", <<EOF
Define a CFEngine 'class' to be sent to remote machine.
Can be used multiple times. A 'class' is like a boolean and can be used to denote a
command, state or multitude of things, it's really up to how the promises were written.

EOF
               ) {|v|
    defines << v
  }

  opts.on_tail("-b bundle", "--bundle bundle", <<EOF
Specify a CFEngine 'bundle' that will execute on remote 
machine instead of the standard one that runs through config files. 

EOF
               ) {|v|
    bundles << v
  }
}
args.parse!

status = run(verbose, is_remote, hosts, defines, bundles)
exit status
