#!/usr/bin/ruby

require 'optparse'

$domain_dat = "@SIPX_CFDATA@/domain.cfdat"
$root_key = "/var/cfengine/ppkeys/localhost.pub"
$user_key = "@SIPXPBXUSER_HOME@/.cfagent/ppkeys/localhost.pub"
$primary_dir = "@SIPX_CFDATA@/1"
$primary_dat = "#{$primary_dir}/primary.cfdat"
$location_dat = "@SIPX_CFDATA@/defaults/location_id"
$cli_options = {}
$fqdn = `hostname -f`.chomp
$cli_options[:host] = $fqdn
$cli_options[:domain] = $fqdn
$exit_status = 0

def set_root_keys
  #harmless if re-run
  `/usr/sbin/cf-key`
end

# PRIMARY ONLY
def set_nonroot_keys
  #harmless if re-run
  `su - @SIPXPBXUSER@ sh -c '/usr/sbin/cf-key'`
end

# PRIMARY ONLY
def set_primary
  File.open($location_dat, 'w') {|f|
    f.puts('1')
  }
  Dir.mkdir($primary_dir) unless File.directory?($primary_dir)
  File.open($primary_dat, 'w') {|f|
    f.puts <<EOF
+primary
+sipxsupervisor
+postgres
+mongod
EOF
  }
  `chown -R @SIPXPBXUSER@:@SIPXPBXGROUP@ #{$primary_dir}`
end

# PRIMARY ONLY
def set_domain
  return if File.exists?($domain_dat)
  shared_secret = $cli_options[:shared_secret] || `head -c 18 /dev/urandom | base64`.chomp
  File.open($domain_dat, 'w') { |f|
    f.puts <<EOF
=domain=#{$cli_options['domain']}
=realm=#{$cli_options['domain']}
=secret=#{shared_secret}
=lang=en
EOF
  }
  `chown @SIPXPBXUSER@:@SIPXPBXGROUP@ #{$domain_dat}`
end

def rm_file(file)
  File.unlink(file) if File.exists?(file)
end

args = OptionParser.new { |opts|
  opts.banner = "Usage : sipxecs-setup [options]"

  opts.separator ""
  opts.separator "Options:"

  opts.on("--domain domain", "Force system to given domain. Default is #{$fqdn}.") { |val|
    rm_file($domain_dat)
    $cli_options[:domain] = val
  }

  opts.on("--secret secret", "Force configuration to a set secret. Default is a random value.") { |val|
    rm_file($domain_dat)
    $cli_options[:domain] = val
  }

  opts.on("--reset-keys", "Regenerate ssl keys for root to non-root authorization.") {
    rm_file($root_key)
    rm_file($user_key)
  } 

  opts.on_tail("--help", "Print options") {
    puts opts
    exit
  }

}
args.parse!

raise 'Must run as root' unless Process.uid == 0

set_root_keys()
set_nonroot_keys()
set_primary()
set_domain()

puts `@SIPX_BINDIR@/sipxagent`
