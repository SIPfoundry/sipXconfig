<%
  def dports(rule)
    s = "--dport #{rule[:port]}"
    unless rule[:end_port].nil?
      s += ':' + rule[:end_port].to_s
    end
    s
  end

  def limitdrop(loglimit, loginterval)
    s = ""
    if loglimit > 0
      s += "-m limit --limit " + loglimit.to_s + "/" + loginterval.to_s + " "
    end
    s
  end
%>*filter
:INPUT DROP [0:0]
:FORWARD DROP [0:0]
:OUTPUT ACCEPT [60:6096]
:syn-flood - [0:0]
:LOGDROP - [0:0]
<%
  if logdropped
%>-A LOGDROP -j LOG <%= limitdrop(loglimit, loginterval) %>--log-level 6 --log-prefix "firewall-drop: "
<%
  end
%>-A LOGDROP -j DROP
<%
  unless chains.nil?
    chains.each { |chain|
%>-N <%= chain[:name] %>
<%
      chain[:ipv4s].each { |ipv4|
%>-A <%= chain[:name] %> -s <%= ipv4 %> -j ACCEPT
<%
      }
%>-A <%= chain[:name] %> -j LOGDROP
<%
    }
  end

  cluster.each { |ipv4|
%>-A INPUT -i $(sipx.iface) -s <%= ipv4 %> -j ACCEPT
<%
  }

  unless blacklist.nil?
    blacklist.each { |blackipv4|
%>-A INPUT -i $(sipx.iface) -s <%= blackipv4[:cidr] %> -j LOGDROP
<%
  }
  end

  rules.each { |rule|
%>-A INPUT -i $(sipx.iface) -p <%= rule[:protocol] %> <%= dports(rule) %> -m state --state NEW,ESTABLISHED -m comment --comment "<%= rule[:service] %>" -j <%= rule[:chain] %>
<%
  }

  if defined? filter && !filter.nil?
    filter.each { |rule|
%><%= rule %>
<%
    }
  end
%>
<%# Simple things like outgoing DNS queries would not work w/o allowing response traffic back in %>
-A INPUT -i $(sipx.iface) -m state --state RELATED,ESTABLISHED -j ACCEPT
-A INPUT -p icmp -j ACCEPT
-A INPUT -i lo -j ACCEPT
<%# log and drop everything else %>
-A INPUT -j LOGDROP
COMMIT

*nat
:PREROUTING ACCEPT [804:106008]
:POSTROUTING ACCEPT [1376:92796]
:OUTPUT ACCEPT [1376:92796]
<%
  if defined? nat && !nat.nil?
    nat.each { |rule|
%><%= rule %>
<%
    }
  end
%>
COMMIT

*mangle
:PREROUTING ACCEPT [0:0]
:INPUT ACCEPT [0:0]
:FORWARD ACCEPT [0:0]
:OUTPUT ACCEPT [0:0]
:POSTROUTING ACCEPT [0:0]
<%
  rules.each { |rule|
    if rule[:priority]
%>-A OUTPUT -o $(sipx.iface) -p <%= rule[:protocol] %> <%= dports(rule) %> -m comment --comment "<%= rule[:service] %>" -j DSCP --set-dscp-class EF
<%
    end
  }

  if defined? mangle && !mangle.nil?
    mangle.each { |rule|
%><%= rule %>
<%
    }
  end
%>
COMMIT
