*filter
:INPUT DROP [0:0]
:FORWARD DROP [0:0]
:OUTPUT ACCEPT [60:6096]
:syn-flood - [0:0]

<%
  unless chains.nil?
    chains.each { |chain|
%>-N <%= chain[:name] %>
<%
      chain[:ipv4s].each { |ipv4|
%>-A <%= chain[:name] %> -s <%= ipv4 %> -j ACCEPT
<%
      }
%>-A <%= chain[:name] %> -j DROP
<%
    }
  end
%>

<%
  cluster.each { |ipv4|
%>-A INPUT -i $(sipx.iface) -s <%= ipv4 %> -j ACCEPT
<%
  }
%>

<% 
  rules.each { |rule|
%>-A INPUT -i $(sipx.iface) -p <%= rule[:protocol] %> --dport <%= rule[:port] %> -m state --state NEW,ESTABLISHED -j <%= rule[:chain] %>
<%
    if rule[:prioritize]
%>-t mangle -A OUTPUT -i $(sipx.iface) -p <%= rule[:protocol] %> --dport <%= rule[:port] %> -j DSCP --set-dscp-class EF
<%
    end
  }
%>

<%# Simple things like outgoing DNS queries would not work w/o allowing response traffic back in %>
-A INPUT -i $(sipx.iface) -m state --state RELATED,ESTABLISHED -j ACCEPT

-A INPUT -p icmp -j ACCEPT
-A INPUT -i lo -j ACCEPT
COMMIT
