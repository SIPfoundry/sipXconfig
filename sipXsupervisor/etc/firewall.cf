# Copyright (C) 2012 eZuce Inc., certain elements licensed under a Contributor Agreement.
# Contributors retain copyright to elements licensed under a Contributor Agreement.
# Licensed to the User under the AGPL license.

#
# This is iptables configuration. Uses either /etc/init.d./iptables (centos 6) or 
# /bin/systemctl (fedora 16) scripts whichever are available.
#
bundle agent firewall {
 vars:
   "service" string => "/etc/init.d/iptables";
   "systemctl" string => "/bin/systemctl";

 classes:
    "has_service_script" expression => fileexists("$(service)");
    "has_sytemctl" expression => fileexists("$(systemctl)");

  methods:
    has_service_script::
      "any" usebundle => "firewall_service_running";
    has_sytemctl::
      "any" usebundle => "firewall_systemctl_running";
}


bundle agent firewall_systemctl_running {
  vars:
    "service" string => "iptables.service";

  classes:
    "iptables_running" expression => returnszero("$(firewall.systemctl) is-active $(service)","noshell");

  commands:
    # NOTE: Start/stop commands will complain about not being able to open a TTY, but commands
    # to complete their task
    iptables_running.!firewall::
      "$(firewall.systemctl)"
        args => "stop $(service)",
	action => track("$(service) stop");
      "$(firewall.systemctl)"
        args => "disable $(service)",
	action => track("$(service) disable");

    !iptables_running.firewall::
      "$(firewall.systemctl)"
        args => "start $(service)",
	action => track("$(service) start");
      "$(firewall.systemctl)"
        args => "enable $(service)",
	action => track("$(service) enable");
}


bundle agent firewall_service_running {
  classes:
    "iptables_running" expression => returnszero("/sbin/lsmod | grep ip_tables","useshell");

  methods:
    !firewall::
      "any" usebundle => rh_chkconfig_status("iptables off");
    firewall::
      "any" usebundle => rh_chkconfig_status("iptables on");

  commands:
    iptables_running.!firewall::
      "$(firewall.service)"
        args => "stop",
	action => track("$(firewall.service) stop");

    !iptables_running.firewall::
      "$(firewall.service)"
        args => "start",
	action => track("$(firewall.service) start");

    restart_iptables::
      "$(firewall.service)"
        args => "restart",
	action => track("$(firewall.service) restart");
}

