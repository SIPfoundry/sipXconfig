# Copyright (c) 2012 eZuce, Inc. All rights reserved.
# Contributed to SIPfoundry under a Contributor Agreement

# This software is free software; you can redistribute it and/or modify it under
# the terms of the Affero General Public License (AGPL) as published by the
# Free Software Foundation; either version 3 of the License, or (at your option)
# any later version.

# This software is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more
# details.

#
# This is iptables configuration. Uses either /etc/init.d./iptables (centos 6) or 
# /bin/systemctl (fedora 16) scripts whichever are available.
#
bundle agent firewall {
  methods:
    firewall::
      "any" usebundle => "firewall_config";
    fedora16_or_greater.!unmanaged_firewall::
      "any" usebundle => "firewall_systemctl_running";
    !fedora16_or_greater.!unmanaged_firewall::
      "any" usebundle => "firewall_sysv_running";
}

bundle agent firewall_config {
  vars:
    "dim_sysctl" int => readstringarray("sysctl", "$(sipx.SIPX_CFDATA)/sysctl.part", 
        "\s*#[^\n]*", "=", 10, 4000);
    "sysctl_tunables" slist => getindices("firewall_config.sysctl");
    "rules" string => "$(sipx.SIPX_CFDATA)/$(sipx.location_id)/firewall.yaml";

  files:
    any::
      "$(rules)"
        comment => "check for updates in firewall rules in $(this.promiser)",
        changes => repair_on_change,
        classes => if_repaired("update_firewall"),
        action => fix;

      "/etc/sysctl.conf"
        comment => "Kernel network parameters $(this.promoiser)",
        perms => mog("0644","root","root"),
        create => "true",
        edit_line => sysctl_conf("@(firewall_config.sysctl_tunables)"),
        classes => if_repaired("update_sysctl");

  commands:
    update_sysctl::
      "/sbin/sysctl"
        comment => "Apply kernel network parameters",
        args => "-p";

  commands:
    update_firewall.unmanaged_firewall::
      "$(sipx.SIPX_LIBEXECDIR)/sipx-firewall-maker"
        comment => "Install new firewall rules",
        contain => in_shell,
        args => "--in $(rules) --out /etc/sysconfig/iptables.unmanaged";

    update_firewall.!unmanaged_firewall::
      "$(sipx.SIPX_LIBEXECDIR)/sipx-firewall-maker"
        comment => "Install new firewall rules",
        contain => in_shell,
        args => "--in $(rules) | /sbin/iptables-restore";
}

bundle edit_line sysctl_conf(sysctl_tunables) {
  insert_lines:
    "$(sysctl_tunables) = $(firewall_config.sysctl[$(sysctl_tunables)][1])";

  delete_lines:
    "$(sysctl_tunables)\s*=.*";
}

bundle agent firewall_systemctl_running {
  vars:
    "service" string => "iptables.service";

  classes:
    "iptables_running" expression => returnszero("$(sipx.systemctl) is-active $(service)","noshell");

  commands:
    # NOTE: Start/stop commands will complain about not being able to open a TTY, but commands
    # to complete their task
    iptables_running.!firewall::
      "$(sipx.systemctl)"
        comment => "stop iptables",
        args => "stop $(service)";

      "$(sipx.systemctl)"
        comment => "disable iptables",
        args => "disable $(service)";

    !iptables_running.firewall::
      "$(sipx.systemctl)"
        comment => "start iptables",
        args => "start $(service)";

      "$(sipx.systemctl)"
        comment => "enable iptables",
        args => "enable $(service)";
}


bundle agent firewall_sysv_running {
  vars:
   "service" string => "/etc/init.d/iptables";

  classes:    
    "iptables_running" expression => fileexists("/var/lock/subsys/iptables");

  methods:
    !firewall::
      "any" usebundle => rh_chkconfig_status("iptables off");
    firewall::
      "any" usebundle => rh_chkconfig_status("iptables on");

  commands:
    !firewall.iptables_running::
      "$(service)"
        comment => "stop iptables",
        args => "stop";

    firewall.!iptables_running::
      "$(service)"
        comment => "start iptables",
        args => "start";

    firewall.iptables_running.restart_iptables::
      "$(service)"
        comment => "start iptables",
        args => "restart";
}

