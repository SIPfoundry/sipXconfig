# Copyright (c) 2012 eZuce, Inc. All rights reserved.
# Contributed to SIPfoundry under a Contributor Agreement

# This software is free software; you can redistribute it and/or modify it under
# the terms of the Affero General Public License (AGPL) as published by the
# Free Software Foundation; either version 3 of the License, or (at your option)
# any later version.

# This software is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more
# details.

#
# CFEngine server that allows agents to initiate an agent run remotely. This is the rules
# for the running server, not for the configuration management or process management of
# the supervisor.  This is in sipxsupervisor.cf.
#

bundle server sipx {
  vars:
    any::
      # Have to turn scalars_ to slists because of bug found in cfengine 3.2.3 and lower versions
      #  https://cfengine.com/bugtracker/view.php?id=865
      "allowed_addrs" slist => readstringlist("@SIPX_CONFDIR@/sipxsupervisor-allowed-addrs.ini", "#.*", "\n", "100", "10000");
      "allowed_users" slist => readstringlist("@SIPX_CONFDIR@/sipxsupervisor-allowed-users.ini", "#.*", "\n", "10", "1000");
}


body common control {
  bundlesequence => {
    "sipx"
  };
}

body server control {
  skipverify => { ".*" };
  allowconnects => { @(sipx.allowed_addrs) };
  allowallconnects => { @(sipx.allowed_addrs) };
  maxconnections => "5";
  trustkeysfrom => { @(sipx.allowed_addrs) };
  logallconnections => "true";
  cfruncommand => "/usr/sbin/cf-agent -Kvf @SIPX_CFINPUTS@/promises.cf";
  allowusers => { @(sipx.allowed_users) };
}

body agent control {
  verbose => "true";
}

bundle server access_rules {
  vars:
    "export_dirs" slist => {
        "/usr/sbin/cf-agent",
        "@SIPX_CFDATA@",
        "@SIPX_LOGDIR@",
        "@SIPX_CONFDIR@/ssl",
        "@SIPX_VARDIR@/tmp/"
     };
  access:
    "$(export_dirs)"
        admit => { @(sipx.allowed_addrs) },
        maproot => { @(sipx.allowed_addrs) };

    roles:
        ".*"
	  # todo, remove root?
	  authorize => { @(sipx.allowed_users) };
  reports:
    linux::
      "Allowing connections from $(sipx.allowed_addrs)";
}

body runagent control {
  hosts => { @(sipx.allowed_addrs) };
  trustkey => "true";
  encrypt => "true";
}
