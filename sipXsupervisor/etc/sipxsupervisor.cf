# Copyright (C) 2012 eZuce Inc., certain elements licensed under a Contributor Agreement.
# Contributors retain copyright to elements licensed under a Contributor Agreement.
# Licensed to the User under the AGPL license.

#
# This is sipxsupervisor the configuration and process management. Not to be 
# confused with sipxsupervisord.cf which is the rules for the sipxsupervisor
# running instance
#
bundle agent sipxsupervisor {
  # cannot think of a situtation were sipxsupervisor would ever be off 
  # (i.e. !sipxsupervisor) but none the less, let's support it here as it 
  # makes little difference to code.
  methods:
    sipxsupervisor::
      "any" usebundle => "sipxsupervisor_config";
      "any" usebundle => "sipxsupervisor_setup";
    any::
      "any" usebundle => "sipxsupervisor_running";
}

bundle agent sipxsupervisor_config {
  files:
    any::
      "$(sipx.SIPX_CONFDIR)/sipxsupervisor-allowed-addrs.ini"
        comment => "add allowed addresses to sipxsupervisor",
        create => "true",
        perms => m("644"),
        edit_line => sipxsupervisor_allowed_addrs,
        classes => if_repaired("restart_sipxsupervisor");

      "$(sipx.SIPX_CONFDIR)/sipxsupervisor-allowed-users.ini"
        comment => "add allowed users to sipxsupervisor",
        create => "true",
        perms => m("644"),
        edit_line => sipxsupervisor_allowed_users;
}

bundle edit_line sipxsupervisor_allowed_addrs {
  vars:
    "part_file" string => "$(sipx.SIPX_CFDATA)/sipxsupervisor-allowed-addrs.part";

  classes:
    "part_exists" expression => fileexists("$(part_file)");

  insert_lines:
    part_exists::
      "$(part_file)"
        insert_type => "file";

    any::  
      "127.0.0.1";
      "::1";

  delete_lines:
    any::
      ".*";
}

bundle edit_line sipxsupervisor_allowed_users {
  vars:
    "part_file" string => "$(sipx.SIPX_CFDATA)/sipxsupervisor-allowed-users.part";

  classes:
    "part_exists" expression => fileexists("$(part_file)");

  insert_lines:
    part_exists::
      "$(part_file)"
        insert_type => "file";

    any::  
      "root";
      "$(sipx.SIPXPBXUSER)";

  delete_lines:
    any::
      ".*";
}

bundle agent sipxsupervisor_setup {
  methods:
    !src.sipxsupervisor::
      "any" usebundle => rh_chkconfig_status("sipxsupervisor on");
    !src.!sipxsupervisor::
      "any" usebundle => rh_chkconfig_status("sipxsupervisor off");
}

bundle agent sipxsupervisor_running {
  vars:
    any::
      "service_command" string => "/usr/sbin/cf-serverd";

  methods:
    any::
      "any" usebundle => find_service_by_command("$(service_command)","sipxsupervisor_running","root");

  commands:
    !sipxsupervisor.sipxsupervisor_running::
      "$(sipx.SIPX_SERVICEDIR)/sipxsupervisor"
        comment => "stop sipxsupervisor",
        args => "stop";

    sipxsupervisor.!sipxsupervisor_running::
      "$(sipx.SIPX_SERVICEDIR)/sipxsupervisor"
        comment => "start sipxsupervisor",
        args => "start";

    # NOTE: Restart in background because often supervisor is coordinating the restart command.
    # Delay 60 seconds but not tested as being optimal value. -- Douglas
    sipxsupervisor.sipxsupervisor_running.(restart_sipxecs|restart_sipxsupervisor)::
      "$(sipx.SIPX_CFMODULES)/run-later"
        comment => "restart sipxsupervisor in background",
        args => "60 $(sipx.SIPX_SERVICEDIR)/sipxsupervisor restart";
}

