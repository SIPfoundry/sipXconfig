# Copyright (c) 2012 eZuce, Inc. All rights reserved.
# Contributed to SIPfoundry under a Contributor Agreement
#
# This software is free software; you can redistribute it and/or modify it under
# the terms of the Affero General Public License (AGPL) as published by the
# Free Software Foundation; either version 3 of the License, or (at your option)
# any later version.
#
# This software is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more
# details.

bundle agent mysql {
  methods:
    mysql::
      "any" usebundle => mysql_conf;

    fedora16_or_greater::
      "any" usebundle => mysql_sysctl_running;
    !fedora16_or_greater::
      "any" usebundle => mysql_sysv_running;
}

bundle agent mysql_conf {
  files:
    mysql::
      "/etc/my.cnf"
        comment => "MySQL server config $(this.promiser)",
        create => "false",
        perms => mog("644", "root", "root"),
        edit_line => my_cnf,
        classes => if_repaired("restart_mysql");
}

bundle edit_line my_cnf {
  vars:
    "v[default-time-zone]" string => "'+00:00'";
    "k" slist => getindices("v");

  insert_lines:
    "$(k)=$(v[$(k)])"
      select_region => INI_section("mysqld");

  delete_lines:
    "^$(k)\s*=.*$";
}

bundle agent mysql_ensure_db(name, schema_sql) {
  classes:
    mysql::
      "db_exists" expression => fileexists("/var/lib/mysql/$(name)");

  commands:
   !db_exists.mysql::
     "/usr/bin/mysql"
       comment => "create mysql db $(name)",
       args => "--user=root -e 'create database $(name)'";

     "/usr/bin/mysql"
       comment => "adding schema $(schema_sql) to db $(name)",
       args => "--user=root $(name) -e 'source $(schema_sql)'";
}

bundle agent mysql_ensure_table(dbname, table, schema_sql) {
  vars:
    mysql::
      "rc" string => execresult("/usr/bin/mysql -u root $(dbname) -e 'select count(*) from $(table)'", "noshell");
      
  classes:
    mysql::
      "table_exists" expression => strcmp("0", "$(rc)");

  commands:
   !table_exists.mysql::
     "/usr/bin/mysql"
       comment => "create mysql table $(table) in $(dbname)",
       args => "--user=root $(dbname) -e 'source $(schema_sql)'";
}

body contain useshell {
  useshell => "true";
}

bundle agent mysql_sysv_running {
  vars:
    any::
      "service_command" string => "/usr/libexec/mysqld";
      "daemon" string => "/etc/init.d/mysqld";
      "service_user" string => "mysql";

  methods:
    any::
      "any" usebundle => find_service_by_command("$(service_command)", "mysqld_running", "$(service_user)");
    mysql::
      "any" usebundle => rh_chkconfig_status("mysqld on");
    !mysql::
      "any" usebundle => rh_chkconfig_status("mysqld off");

  commands:
    !mysql.mysql_running::
      "$(daemon)"
        comment => "stop mysqld",
        args => "stop";

    mysql.!mysql_running::
      "$(daemon)"
        comment => "start mysqld",
        args => "start";

    mysql.mysql_running.restart_mysql::
      "$(daemon)"
        comment => "restart mysqld",
        args => "restart";
}

bundle agent mysql_sysctl_running {
  vars:
    any::
      "service" string => "mysqld.service";

  classes:
    fedora16_or_greater::
      "mysql_running" expression => returnszero("$(sipx.systemctl) is-active $(service)","noshell");

  commands:
    !mysql.mysql_running::
      "$(sipx.systemctl)"
        comment => "stop $(service)",
        args => "stop $(service)";

      "$(sipx.systemctl)"
        comment => "disable $(service)",
        args => "disable $(service)";

    mysql.!mysql_running::
      "$(sipx.systemctl)"
        comment => "start $(service)",
        args => "start $(service)";

      "$(sipx.systemctl)"
        comment => "enable $(service)",
        args => "enable $(service)";

    mysql.mysql_running.restart_mysql::
      "$(sipx.systemctl)"
        comment => "restart $(service)",
        args => "restart $(service)";
}