#!/bin/bash

# chkconfig: 35 85 15
# description: sipxprovision is a device auto provisioning system
# processname: sipxprovision

# Copyright (C) 2012 eZuce Inc., certain elements licensed under a Contributor Agreement.
# Contributors retain copyright to elements licensed under a Contributor Agreement.
# Licensed to the User under the AGPL license.

. /etc/rc.d/init.d/functions || exit $ENOENT
. @SIPX_LIBEXECDIR@/sipx-utils.sh || { echo_failure; echo; exit $ENOENT; }

prog=sipxprovision
pidfile="@SIPX_RUNDIR@/sipxprovision.pid"
config="@SIPX_CONFDIR@/sipxprovision-config"
regex="Dprocname=sipxprovision"

[ -e @SIPX_CONFDIR@/sysconfig/$prog ] && . @SIPX_CONFDIR@/sysconfig/$prog

configtest() {	
  # Check that the config gile exists.	  
  sipx_config_exists $config
  Status=$(($Status+$?))

  # Check that the log file is writable.
  logfile="@SIPX_LOGDIR@/sipXprovision.log"
  if [ -e $logfile -a ! -w $logfile ]
  then
    echo "Log file '$logfile' exists but is not writable by user '@SIPXPBXUSER@'." >&2
    Status=$ENOTWRITABLE
  fi
}

# Start sipxrecording
start() {
  [ -f $config ] || { echo -n "$invalidFileError"; echo_failure; echo; exit $ENOENT; }
  
  JavaCmd=`@SIPX_BINDIR@/sipx-config --java`
  Dependencies=`@SIPX_BINDIR@/java-dep -d @SIPX_JAVADIR@/sipXcommons @provision_PKGS@`
  export CLASSPATH=`echo @SIPX_CONFDIR@/sipxprovision @SIPX_JAVADIR@/sipXprovision/*.jar ${Dependencies} | sed -e 's/ /:/g'`  
  
  setJavaSslOpts
  
  Command="$JavaCmd \
    -Dprocname=sipxprovision \
    $TrustStoreOpts \
    $KeyStoreOpts \
    ${SIPXPROVISION_OPTS} \
    -Djetty.x509.algorithm=$X509Algorithm \
    -Djetty.ssl.password=$StorePassword \
    -Djetty.ssl.keypassword=$StorePassword \
    -Dconf.dir=@SIPX_CONFDIR@ \
    -Dvar.dir=@SIPX_VARDIR@ \
    org.sipfoundry.sipxprovision.SipXprovision \
    $Args"
  if [ -n "${NoFork}" ] ; then
    killAnyOrphans @SIPXPBXUSER@ $regex
    runuser -s /bin/bash @SIPXPBXUSER@ -c "${Command}"
  else
    checkRunningInstance @SIPXPBXUSER@ $regex > /dev/null
    Status=$?
    [ $Status -eq 0 ] && { echo -n "$prog $runningError"; echo_failure; echo; exit $ERUNNING; }

    echo -n $"Starting $prog: "
    runuser -s /bin/bash @SIPXPBXUSER@ -c "${Command}" >/dev/null 2>&1 &
    echo $! > ${pidfile}

    if [ $# -gt 0 ]; then
      #check if process was spawned
      checkRunningInstanceTimeout @SIPXPBXUSER@ $regex
      Status=$?
      [ $Status -eq 0 ] || { echo_failure; echo; exit $ESRCH; }
      pid=`ps -u @SIPXPBXUSER@ -o pid,args | grep $regex | grep -v "grep" | awk '{print $1 }'`
      checkIfListening $pid
      Status=$?
      [ $Status -eq 0 ] || { echo_failure; echo; exit $ENOSCKT; }
      [ $Status -eq 0 ] && { echo_success; echo; }
    else
      echo_success; echo;
    fi
  fi
}

stop() {
  echo -n $"Stopping $prog: "
  killAnyOrphans @SIPXPBXUSER@ $regex
  checkRunningInstance @SIPXPBXUSER@ $regex > /dev/null
  Status=$?
  [ $Status -eq 0 ] && { echo_failure; echo; exit $ERUNNING; }
  [ $Status -eq 0 ] || { echo_success; echo; }
}

restart() {
  stop
  # sleep for no good reason. Can be disconcerting if stop/start
  # switch is too fast IMHO
  sleep 1
  start $withCheck
}

asyncrestart() {
  stop
  # sleep for no good reason. Can be disconcerting if stop/start
  # switch is too fast IMHO
  sleep 1
  start
}

case "$1" in
  nofork)
    NoFork=1
    start
    ;;
  start)
    start $withCheck
    ;;
  stop)
    stop
    ;;
  restart|reload|force-reload)
    restart
    ;;
  asyncrestart)
    asyncrestart
    ;;
  condrestart)
    checkRunningInstance @SIPXPBXUSER@ $regex > /dev/null
    Status=$?
    [ $Status -eq 0 ] && restart || :
    ;;
  status)
    checkRunningInstance @SIPXPBXUSER@ $regex $prog
    Status=$?
    ;;
  configtest)
    configtest
    ;;
  *)
    echo "Usage: $0 {start|stop|status|restart|asyncrestart|reload|force-reload|condrestart|nofork}"
    Status=$EINCORRECTUSAGE
esac

exit $Status
